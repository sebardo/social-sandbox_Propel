<?php

/**
 * Base class that represents a row from the 'sf_guard_user' table.
 *
 * 
 *
 * This class was autogenerated by Propel 1.4.2 on:
 *
 * Sat Aug 13 13:01:59 2011
 *
 * @package    plugins.sfGuardPlugin.lib.model.om
 */
abstract class BasesfGuardUser extends BaseObject  implements Persistent {


	/**
	 * The Peer class.
	 * Instance provides a convenient way of calling static methods on a class
	 * that calling code may not be able to identify.
	 * @var        sfGuardUserPeer
	 */
	protected static $peer;

	/**
	 * The value for the id field.
	 * @var        int
	 */
	protected $id;

	/**
	 * The value for the first_name field.
	 * @var        string
	 */
	protected $first_name;

	/**
	 * The value for the last_name field.
	 * @var        string
	 */
	protected $last_name;

	/**
	 * The value for the email_address field.
	 * @var        string
	 */
	protected $email_address;

	/**
	 * The value for the username field.
	 * @var        string
	 */
	protected $username;

	/**
	 * The value for the algorithm field.
	 * Note: this column has a database default value of: 'sha1'
	 * @var        string
	 */
	protected $algorithm;

	/**
	 * The value for the salt field.
	 * @var        string
	 */
	protected $salt;

	/**
	 * The value for the password field.
	 * @var        string
	 */
	protected $password;

	/**
	 * The value for the sex field.
	 * Note: this column has a database default value of: false
	 * @var        boolean
	 */
	protected $sex;

	/**
	 * The value for the birthday field.
	 * @var        string
	 */
	protected $birthday;

	/**
	 * The value for the aboutme field.
	 * @var        string
	 */
	protected $aboutme;

	/**
	 * The value for the profession field.
	 * @var        string
	 */
	protected $profession;

	/**
	 * The value for the music field.
	 * @var        string
	 */
	protected $music;

	/**
	 * The value for the books field.
	 * @var        string
	 */
	protected $books;

	/**
	 * The value for the films field.
	 * @var        string
	 */
	protected $films;

	/**
	 * The value for the television field.
	 * @var        string
	 */
	protected $television;

	/**
	 * The value for the games field.
	 * @var        string
	 */
	protected $games;

	/**
	 * The value for the marital_status field.
	 * @var        int
	 */
	protected $marital_status;

	/**
	 * The value for the meeting_sex field.
	 * @var        int
	 */
	protected $meeting_sex;

	/**
	 * The value for the hometown field.
	 * @var        string
	 */
	protected $hometown;

	/**
	 * The value for the borntown field.
	 * @var        string
	 */
	protected $borntown;

	/**
	 * The value for the smoker field.
	 * @var        int
	 */
	protected $smoker;

	/**
	 * The value for the drinker field.
	 * @var        int
	 */
	protected $drinker;

	/**
	 * The value for the education field.
	 * @var        string
	 */
	protected $education;

	/**
	 * The value for the language field.
	 * @var        string
	 */
	protected $language;

	/**
	 * The value for the religion field.
	 * @var        string
	 */
	protected $religion;

	/**
	 * The value for the politic field.
	 * @var        string
	 */
	protected $politic;

	/**
	 * The value for the country field.
	 * @var        string
	 */
	protected $country;

	/**
	 * The value for the city field.
	 * @var        string
	 */
	protected $city;

	/**
	 * The value for the cp field.
	 * @var        string
	 */
	protected $cp;

	/**
	 * The value for the description field.
	 * @var        string
	 */
	protected $description;

	/**
	 * The value for the contact field.
	 * @var        string
	 */
	protected $contact;

	/**
	 * The value for the created_at field.
	 * @var        string
	 */
	protected $created_at;

	/**
	 * The value for the last_login field.
	 * @var        string
	 */
	protected $last_login;

	/**
	 * The value for the is_active field.
	 * Note: this column has a database default value of: false
	 * @var        boolean
	 */
	protected $is_active;

	/**
	 * The value for the is_super_admin field.
	 * Note: this column has a database default value of: false
	 * @var        boolean
	 */
	protected $is_super_admin;

	/**
	 * @var        array inbox[] Collection to store aggregation of inbox objects.
	 */
	protected $collinboxsRelatedByUserId;

	/**
	 * @var        Criteria The criteria used to select the current contents of collinboxsRelatedByUserId.
	 */
	private $lastinboxRelatedByUserIdCriteria = null;

	/**
	 * @var        array inbox[] Collection to store aggregation of inbox objects.
	 */
	protected $collinboxsRelatedByDestUserId;

	/**
	 * @var        Criteria The criteria used to select the current contents of collinboxsRelatedByDestUserId.
	 */
	private $lastinboxRelatedByDestUserIdCriteria = null;

	/**
	 * @var        array sfGuardUserPermission[] Collection to store aggregation of sfGuardUserPermission objects.
	 */
	protected $collsfGuardUserPermissions;

	/**
	 * @var        Criteria The criteria used to select the current contents of collsfGuardUserPermissions.
	 */
	private $lastsfGuardUserPermissionCriteria = null;

	/**
	 * @var        array sfGuardUserGroup[] Collection to store aggregation of sfGuardUserGroup objects.
	 */
	protected $collsfGuardUserGroups;

	/**
	 * @var        Criteria The criteria used to select the current contents of collsfGuardUserGroups.
	 */
	private $lastsfGuardUserGroupCriteria = null;

	/**
	 * @var        array sfGuardRememberKey[] Collection to store aggregation of sfGuardRememberKey objects.
	 */
	protected $collsfGuardRememberKeys;

	/**
	 * @var        Criteria The criteria used to select the current contents of collsfGuardRememberKeys.
	 */
	private $lastsfGuardRememberKeyCriteria = null;

	/**
	 * @var        Sfguardforgotpassword one-to-one related Sfguardforgotpassword object
	 */
	protected $singleSfguardforgotpassword;

	/**
	 * @var        array Location[] Collection to store aggregation of Location objects.
	 */
	protected $collLocations;

	/**
	 * @var        Criteria The criteria used to select the current contents of collLocations.
	 */
	private $lastLocationCriteria = null;

	/**
	 * @var        array Favlike[] Collection to store aggregation of Favlike objects.
	 */
	protected $collFavlikesRelatedByUserId;

	/**
	 * @var        Criteria The criteria used to select the current contents of collFavlikesRelatedByUserId.
	 */
	private $lastFavlikeRelatedByUserIdCriteria = null;

	/**
	 * @var        array Favlike[] Collection to store aggregation of Favlike objects.
	 */
	protected $collFavlikesRelatedByDestUserId;

	/**
	 * @var        Criteria The criteria used to select the current contents of collFavlikesRelatedByDestUserId.
	 */
	private $lastFavlikeRelatedByDestUserIdCriteria = null;

	/**
	 * @var        array Comment[] Collection to store aggregation of Comment objects.
	 */
	protected $collCommentsRelatedByUserId;

	/**
	 * @var        Criteria The criteria used to select the current contents of collCommentsRelatedByUserId.
	 */
	private $lastCommentRelatedByUserIdCriteria = null;

	/**
	 * @var        array Comment[] Collection to store aggregation of Comment objects.
	 */
	protected $collCommentsRelatedByDestUserId;

	/**
	 * @var        Criteria The criteria used to select the current contents of collCommentsRelatedByDestUserId.
	 */
	private $lastCommentRelatedByDestUserIdCriteria = null;

	/**
	 * @var        array Pubs[] Collection to store aggregation of Pubs objects.
	 */
	protected $collPubssRelatedByUserId;

	/**
	 * @var        Criteria The criteria used to select the current contents of collPubssRelatedByUserId.
	 */
	private $lastPubsRelatedByUserIdCriteria = null;

	/**
	 * @var        array Pubs[] Collection to store aggregation of Pubs objects.
	 */
	protected $collPubssRelatedByDestUserId;

	/**
	 * @var        Criteria The criteria used to select the current contents of collPubssRelatedByDestUserId.
	 */
	private $lastPubsRelatedByDestUserIdCriteria = null;

	/**
	 * @var        array Audio[] Collection to store aggregation of Audio objects.
	 */
	protected $collAudiosRelatedByUserId;

	/**
	 * @var        Criteria The criteria used to select the current contents of collAudiosRelatedByUserId.
	 */
	private $lastAudioRelatedByUserIdCriteria = null;

	/**
	 * @var        array Audio[] Collection to store aggregation of Audio objects.
	 */
	protected $collAudiosRelatedByDestUserId;

	/**
	 * @var        Criteria The criteria used to select the current contents of collAudiosRelatedByDestUserId.
	 */
	private $lastAudioRelatedByDestUserIdCriteria = null;

	/**
	 * @var        array Playlist[] Collection to store aggregation of Playlist objects.
	 */
	protected $collPlaylists;

	/**
	 * @var        Criteria The criteria used to select the current contents of collPlaylists.
	 */
	private $lastPlaylistCriteria = null;

	/**
	 * @var        array Text[] Collection to store aggregation of Text objects.
	 */
	protected $collTexts;

	/**
	 * @var        Criteria The criteria used to select the current contents of collTexts.
	 */
	private $lastTextCriteria = null;

	/**
	 * @var        array Link[] Collection to store aggregation of Link objects.
	 */
	protected $collLinks;

	/**
	 * @var        Criteria The criteria used to select the current contents of collLinks.
	 */
	private $lastLinkCriteria = null;

	/**
	 * @var        array Follow[] Collection to store aggregation of Follow objects.
	 */
	protected $collFollowsRelatedByUserId;

	/**
	 * @var        Criteria The criteria used to select the current contents of collFollowsRelatedByUserId.
	 */
	private $lastFollowRelatedByUserIdCriteria = null;

	/**
	 * @var        array Follow[] Collection to store aggregation of Follow objects.
	 */
	protected $collFollowsRelatedByFollowId;

	/**
	 * @var        Criteria The criteria used to select the current contents of collFollowsRelatedByFollowId.
	 */
	private $lastFollowRelatedByFollowIdCriteria = null;

	/**
	 * @var        array Notification[] Collection to store aggregation of Notification objects.
	 */
	protected $collNotificationsRelatedByUserId;

	/**
	 * @var        Criteria The criteria used to select the current contents of collNotificationsRelatedByUserId.
	 */
	private $lastNotificationRelatedByUserIdCriteria = null;

	/**
	 * @var        array Notification[] Collection to store aggregation of Notification objects.
	 */
	protected $collNotificationsRelatedByDestUserId;

	/**
	 * @var        Criteria The criteria used to select the current contents of collNotificationsRelatedByDestUserId.
	 */
	private $lastNotificationRelatedByDestUserIdCriteria = null;

	/**
	 * @var        array SettingHasUser[] Collection to store aggregation of SettingHasUser objects.
	 */
	protected $collSettingHasUsers;

	/**
	 * @var        Criteria The criteria used to select the current contents of collSettingHasUsers.
	 */
	private $lastSettingHasUserCriteria = null;

	/**
	 * @var        array Event[] Collection to store aggregation of Event objects.
	 */
	protected $collEvents;

	/**
	 * @var        Criteria The criteria used to select the current contents of collEvents.
	 */
	private $lastEventCriteria = null;

	/**
	 * @var        array AlbumPhoto[] Collection to store aggregation of AlbumPhoto objects.
	 */
	protected $collAlbumPhotos;

	/**
	 * @var        Criteria The criteria used to select the current contents of collAlbumPhotos.
	 */
	private $lastAlbumPhotoCriteria = null;

	/**
	 * @var        array ProfilePhoto[] Collection to store aggregation of ProfilePhoto objects.
	 */
	protected $collProfilePhotos;

	/**
	 * @var        Criteria The criteria used to select the current contents of collProfilePhotos.
	 */
	private $lastProfilePhotoCriteria = null;

	/**
	 * Flag to prevent endless save loop, if this object is referenced
	 * by another object which falls in this transaction.
	 * @var        boolean
	 */
	protected $alreadyInSave = false;

	/**
	 * Flag to prevent endless validation loop, if this object is referenced
	 * by another object which falls in this transaction.
	 * @var        boolean
	 */
	protected $alreadyInValidation = false;

	// symfony behavior
	
	const PEER = 'sfGuardUserPeer';

	/**
	 * Applies default values to this object.
	 * This method should be called from the object's constructor (or
	 * equivalent initialization method).
	 * @see        __construct()
	 */
	public function applyDefaultValues()
	{
		$this->algorithm = 'sha1';
		$this->sex = false;
		$this->is_active = false;
		$this->is_super_admin = false;
	}

	/**
	 * Initializes internal state of BasesfGuardUser object.
	 * @see        applyDefaults()
	 */
	public function __construct()
	{
		parent::__construct();
		$this->applyDefaultValues();
	}

	/**
	 * Get the [id] column value.
	 * 
	 * @return     int
	 */
	public function getId()
	{
		return $this->id;
	}

	/**
	 * Get the [first_name] column value.
	 * 
	 * @return     string
	 */
	public function getFirstName()
	{
		return $this->first_name;
	}

	/**
	 * Get the [last_name] column value.
	 * 
	 * @return     string
	 */
	public function getLastName()
	{
		return $this->last_name;
	}

	/**
	 * Get the [email_address] column value.
	 * 
	 * @return     string
	 */
	public function getEmailAddress()
	{
		return $this->email_address;
	}

	/**
	 * Get the [username] column value.
	 * 
	 * @return     string
	 */
	public function getUsername()
	{
		return $this->username;
	}

	/**
	 * Get the [algorithm] column value.
	 * 
	 * @return     string
	 */
	public function getAlgorithm()
	{
		return $this->algorithm;
	}

	/**
	 * Get the [salt] column value.
	 * 
	 * @return     string
	 */
	public function getSalt()
	{
		return $this->salt;
	}

	/**
	 * Get the [password] column value.
	 * 
	 * @return     string
	 */
	public function getPassword()
	{
		return $this->password;
	}

	/**
	 * Get the [sex] column value.
	 * 
	 * @return     boolean
	 */
	public function getSex()
	{
		return $this->sex;
	}

	/**
	 * Get the [optionally formatted] temporal [birthday] column value.
	 * 
	 *
	 * @param      string $format The date/time format string (either date()-style or strftime()-style).
	 *							If format is NULL, then the raw DateTime object will be returned.
	 * @return     mixed Formatted date/time value as string or DateTime object (if format is NULL), NULL if column is NULL, and 0 if column value is 0000-00-00
	 * @throws     PropelException - if unable to parse/validate the date/time value.
	 */
	public function getBirthday($format = 'Y-m-d')
	{
		if ($this->birthday === null) {
			return null;
		}


		if ($this->birthday === '0000-00-00') {
			// while technically this is not a default value of NULL,
			// this seems to be closest in meaning.
			return null;
		} else {
			try {
				$dt = new DateTime($this->birthday);
			} catch (Exception $x) {
				throw new PropelException("Internally stored date/time/timestamp value could not be converted to DateTime: " . var_export($this->birthday, true), $x);
			}
		}

		if ($format === null) {
			// Because propel.useDateTimeClass is TRUE, we return a DateTime object.
			return $dt;
		} elseif (strpos($format, '%') !== false) {
			return strftime($format, $dt->format('U'));
		} else {
			return $dt->format($format);
		}
	}

	/**
	 * Get the [aboutme] column value.
	 * 
	 * @return     string
	 */
	public function getAboutme()
	{
		return $this->aboutme;
	}

	/**
	 * Get the [profession] column value.
	 * 
	 * @return     string
	 */
	public function getProfession()
	{
		return $this->profession;
	}

	/**
	 * Get the [music] column value.
	 * 
	 * @return     string
	 */
	public function getMusic()
	{
		return $this->music;
	}

	/**
	 * Get the [books] column value.
	 * 
	 * @return     string
	 */
	public function getBooks()
	{
		return $this->books;
	}

	/**
	 * Get the [films] column value.
	 * 
	 * @return     string
	 */
	public function getFilms()
	{
		return $this->films;
	}

	/**
	 * Get the [television] column value.
	 * 
	 * @return     string
	 */
	public function getTelevision()
	{
		return $this->television;
	}

	/**
	 * Get the [games] column value.
	 * 
	 * @return     string
	 */
	public function getGames()
	{
		return $this->games;
	}

	/**
	 * Get the [marital_status] column value.
	 * 
	 * @return     int
	 */
	public function getMaritalStatus()
	{
		return $this->marital_status;
	}

	/**
	 * Get the [meeting_sex] column value.
	 * 
	 * @return     int
	 */
	public function getMeetingSex()
	{
		return $this->meeting_sex;
	}

	/**
	 * Get the [hometown] column value.
	 * 
	 * @return     string
	 */
	public function getHometown()
	{
		return $this->hometown;
	}

	/**
	 * Get the [borntown] column value.
	 * 
	 * @return     string
	 */
	public function getBorntown()
	{
		return $this->borntown;
	}

	/**
	 * Get the [smoker] column value.
	 * 
	 * @return     int
	 */
	public function getSmoker()
	{
		return $this->smoker;
	}

	/**
	 * Get the [drinker] column value.
	 * 
	 * @return     int
	 */
	public function getDrinker()
	{
		return $this->drinker;
	}

	/**
	 * Get the [education] column value.
	 * 
	 * @return     string
	 */
	public function getEducation()
	{
		return $this->education;
	}

	/**
	 * Get the [language] column value.
	 * 
	 * @return     string
	 */
	public function getLanguage()
	{
		return $this->language;
	}

	/**
	 * Get the [religion] column value.
	 * 
	 * @return     string
	 */
	public function getReligion()
	{
		return $this->religion;
	}

	/**
	 * Get the [politic] column value.
	 * 
	 * @return     string
	 */
	public function getPolitic()
	{
		return $this->politic;
	}

	/**
	 * Get the [country] column value.
	 * 
	 * @return     string
	 */
	public function getCountry()
	{
		return $this->country;
	}

	/**
	 * Get the [city] column value.
	 * 
	 * @return     string
	 */
	public function getCity()
	{
		return $this->city;
	}

	/**
	 * Get the [cp] column value.
	 * 
	 * @return     string
	 */
	public function getCp()
	{
		return $this->cp;
	}

	/**
	 * Get the [description] column value.
	 * 
	 * @return     string
	 */
	public function getDescription()
	{
		return $this->description;
	}

	/**
	 * Get the [contact] column value.
	 * 
	 * @return     string
	 */
	public function getContact()
	{
		return $this->contact;
	}

	/**
	 * Get the [optionally formatted] temporal [created_at] column value.
	 * 
	 *
	 * @param      string $format The date/time format string (either date()-style or strftime()-style).
	 *							If format is NULL, then the raw DateTime object will be returned.
	 * @return     mixed Formatted date/time value as string or DateTime object (if format is NULL), NULL if column is NULL, and 0 if column value is 0000-00-00 00:00:00
	 * @throws     PropelException - if unable to parse/validate the date/time value.
	 */
	public function getCreatedAt($format = 'Y-m-d H:i:s')
	{
		if ($this->created_at === null) {
			return null;
		}


		if ($this->created_at === '0000-00-00 00:00:00') {
			// while technically this is not a default value of NULL,
			// this seems to be closest in meaning.
			return null;
		} else {
			try {
				$dt = new DateTime($this->created_at);
			} catch (Exception $x) {
				throw new PropelException("Internally stored date/time/timestamp value could not be converted to DateTime: " . var_export($this->created_at, true), $x);
			}
		}

		if ($format === null) {
			// Because propel.useDateTimeClass is TRUE, we return a DateTime object.
			return $dt;
		} elseif (strpos($format, '%') !== false) {
			return strftime($format, $dt->format('U'));
		} else {
			return $dt->format($format);
		}
	}

	/**
	 * Get the [optionally formatted] temporal [last_login] column value.
	 * 
	 *
	 * @param      string $format The date/time format string (either date()-style or strftime()-style).
	 *							If format is NULL, then the raw DateTime object will be returned.
	 * @return     mixed Formatted date/time value as string or DateTime object (if format is NULL), NULL if column is NULL, and 0 if column value is 0000-00-00 00:00:00
	 * @throws     PropelException - if unable to parse/validate the date/time value.
	 */
	public function getLastLogin($format = 'Y-m-d H:i:s')
	{
		if ($this->last_login === null) {
			return null;
		}


		if ($this->last_login === '0000-00-00 00:00:00') {
			// while technically this is not a default value of NULL,
			// this seems to be closest in meaning.
			return null;
		} else {
			try {
				$dt = new DateTime($this->last_login);
			} catch (Exception $x) {
				throw new PropelException("Internally stored date/time/timestamp value could not be converted to DateTime: " . var_export($this->last_login, true), $x);
			}
		}

		if ($format === null) {
			// Because propel.useDateTimeClass is TRUE, we return a DateTime object.
			return $dt;
		} elseif (strpos($format, '%') !== false) {
			return strftime($format, $dt->format('U'));
		} else {
			return $dt->format($format);
		}
	}

	/**
	 * Get the [is_active] column value.
	 * 
	 * @return     boolean
	 */
	public function getIsActive()
	{
		return $this->is_active;
	}

	/**
	 * Get the [is_super_admin] column value.
	 * 
	 * @return     boolean
	 */
	public function getIsSuperAdmin()
	{
		return $this->is_super_admin;
	}

	/**
	 * Set the value of [id] column.
	 * 
	 * @param      int $v new value
	 * @return     sfGuardUser The current object (for fluent API support)
	 */
	public function setId($v)
	{
		if ($v !== null) {
			$v = (int) $v;
		}

		if ($this->id !== $v) {
			$this->id = $v;
			$this->modifiedColumns[] = sfGuardUserPeer::ID;
		}

		return $this;
	} // setId()

	/**
	 * Set the value of [first_name] column.
	 * 
	 * @param      string $v new value
	 * @return     sfGuardUser The current object (for fluent API support)
	 */
	public function setFirstName($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->first_name !== $v) {
			$this->first_name = $v;
			$this->modifiedColumns[] = sfGuardUserPeer::FIRST_NAME;
		}

		return $this;
	} // setFirstName()

	/**
	 * Set the value of [last_name] column.
	 * 
	 * @param      string $v new value
	 * @return     sfGuardUser The current object (for fluent API support)
	 */
	public function setLastName($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->last_name !== $v) {
			$this->last_name = $v;
			$this->modifiedColumns[] = sfGuardUserPeer::LAST_NAME;
		}

		return $this;
	} // setLastName()

	/**
	 * Set the value of [email_address] column.
	 * 
	 * @param      string $v new value
	 * @return     sfGuardUser The current object (for fluent API support)
	 */
	public function setEmailAddress($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->email_address !== $v) {
			$this->email_address = $v;
			$this->modifiedColumns[] = sfGuardUserPeer::EMAIL_ADDRESS;
		}

		return $this;
	} // setEmailAddress()

	/**
	 * Set the value of [username] column.
	 * 
	 * @param      string $v new value
	 * @return     sfGuardUser The current object (for fluent API support)
	 */
	public function setUsername($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->username !== $v) {
			$this->username = $v;
			$this->modifiedColumns[] = sfGuardUserPeer::USERNAME;
		}

		return $this;
	} // setUsername()

	/**
	 * Set the value of [algorithm] column.
	 * 
	 * @param      string $v new value
	 * @return     sfGuardUser The current object (for fluent API support)
	 */
	public function setAlgorithm($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->algorithm !== $v || $this->isNew()) {
			$this->algorithm = $v;
			$this->modifiedColumns[] = sfGuardUserPeer::ALGORITHM;
		}

		return $this;
	} // setAlgorithm()

	/**
	 * Set the value of [salt] column.
	 * 
	 * @param      string $v new value
	 * @return     sfGuardUser The current object (for fluent API support)
	 */
	public function setSalt($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->salt !== $v) {
			$this->salt = $v;
			$this->modifiedColumns[] = sfGuardUserPeer::SALT;
		}

		return $this;
	} // setSalt()

	/**
	 * Set the value of [password] column.
	 * 
	 * @param      string $v new value
	 * @return     sfGuardUser The current object (for fluent API support)
	 */
	public function setPassword($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->password !== $v) {
			$this->password = $v;
			$this->modifiedColumns[] = sfGuardUserPeer::PASSWORD;
		}

		return $this;
	} // setPassword()

	/**
	 * Set the value of [sex] column.
	 * 
	 * @param      boolean $v new value
	 * @return     sfGuardUser The current object (for fluent API support)
	 */
	public function setSex($v)
	{
		if ($v !== null) {
			$v = (boolean) $v;
		}

		if ($this->sex !== $v || $this->isNew()) {
			$this->sex = $v;
			$this->modifiedColumns[] = sfGuardUserPeer::SEX;
		}

		return $this;
	} // setSex()

	/**
	 * Sets the value of [birthday] column to a normalized version of the date/time value specified.
	 * 
	 * @param      mixed $v string, integer (timestamp), or DateTime value.  Empty string will
	 *						be treated as NULL for temporal objects.
	 * @return     sfGuardUser The current object (for fluent API support)
	 */
	public function setBirthday($v)
	{
		// we treat '' as NULL for temporal objects because DateTime('') == DateTime('now')
		// -- which is unexpected, to say the least.
		if ($v === null || $v === '') {
			$dt = null;
		} elseif ($v instanceof DateTime) {
			$dt = $v;
		} else {
			// some string/numeric value passed; we normalize that so that we can
			// validate it.
			try {
				if (is_numeric($v)) { // if it's a unix timestamp
					$dt = new DateTime('@'.$v, new DateTimeZone('UTC'));
					// We have to explicitly specify and then change the time zone because of a
					// DateTime bug: http://bugs.php.net/bug.php?id=43003
					$dt->setTimeZone(new DateTimeZone(date_default_timezone_get()));
				} else {
					$dt = new DateTime($v);
				}
			} catch (Exception $x) {
				throw new PropelException('Error parsing date/time value: ' . var_export($v, true), $x);
			}
		}

		if ( $this->birthday !== null || $dt !== null ) {
			// (nested ifs are a little easier to read in this case)

			$currNorm = ($this->birthday !== null && $tmpDt = new DateTime($this->birthday)) ? $tmpDt->format('Y-m-d') : null;
			$newNorm = ($dt !== null) ? $dt->format('Y-m-d') : null;

			if ( ($currNorm !== $newNorm) // normalized values don't match 
					)
			{
				$this->birthday = ($dt ? $dt->format('Y-m-d') : null);
				$this->modifiedColumns[] = sfGuardUserPeer::BIRTHDAY;
			}
		} // if either are not null

		return $this;
	} // setBirthday()

	/**
	 * Set the value of [aboutme] column.
	 * 
	 * @param      string $v new value
	 * @return     sfGuardUser The current object (for fluent API support)
	 */
	public function setAboutme($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->aboutme !== $v) {
			$this->aboutme = $v;
			$this->modifiedColumns[] = sfGuardUserPeer::ABOUTME;
		}

		return $this;
	} // setAboutme()

	/**
	 * Set the value of [profession] column.
	 * 
	 * @param      string $v new value
	 * @return     sfGuardUser The current object (for fluent API support)
	 */
	public function setProfession($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->profession !== $v) {
			$this->profession = $v;
			$this->modifiedColumns[] = sfGuardUserPeer::PROFESSION;
		}

		return $this;
	} // setProfession()

	/**
	 * Set the value of [music] column.
	 * 
	 * @param      string $v new value
	 * @return     sfGuardUser The current object (for fluent API support)
	 */
	public function setMusic($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->music !== $v) {
			$this->music = $v;
			$this->modifiedColumns[] = sfGuardUserPeer::MUSIC;
		}

		return $this;
	} // setMusic()

	/**
	 * Set the value of [books] column.
	 * 
	 * @param      string $v new value
	 * @return     sfGuardUser The current object (for fluent API support)
	 */
	public function setBooks($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->books !== $v) {
			$this->books = $v;
			$this->modifiedColumns[] = sfGuardUserPeer::BOOKS;
		}

		return $this;
	} // setBooks()

	/**
	 * Set the value of [films] column.
	 * 
	 * @param      string $v new value
	 * @return     sfGuardUser The current object (for fluent API support)
	 */
	public function setFilms($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->films !== $v) {
			$this->films = $v;
			$this->modifiedColumns[] = sfGuardUserPeer::FILMS;
		}

		return $this;
	} // setFilms()

	/**
	 * Set the value of [television] column.
	 * 
	 * @param      string $v new value
	 * @return     sfGuardUser The current object (for fluent API support)
	 */
	public function setTelevision($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->television !== $v) {
			$this->television = $v;
			$this->modifiedColumns[] = sfGuardUserPeer::TELEVISION;
		}

		return $this;
	} // setTelevision()

	/**
	 * Set the value of [games] column.
	 * 
	 * @param      string $v new value
	 * @return     sfGuardUser The current object (for fluent API support)
	 */
	public function setGames($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->games !== $v) {
			$this->games = $v;
			$this->modifiedColumns[] = sfGuardUserPeer::GAMES;
		}

		return $this;
	} // setGames()

	/**
	 * Set the value of [marital_status] column.
	 * 
	 * @param      int $v new value
	 * @return     sfGuardUser The current object (for fluent API support)
	 */
	public function setMaritalStatus($v)
	{
		if ($v !== null) {
			$v = (int) $v;
		}

		if ($this->marital_status !== $v) {
			$this->marital_status = $v;
			$this->modifiedColumns[] = sfGuardUserPeer::MARITAL_STATUS;
		}

		return $this;
	} // setMaritalStatus()

	/**
	 * Set the value of [meeting_sex] column.
	 * 
	 * @param      int $v new value
	 * @return     sfGuardUser The current object (for fluent API support)
	 */
	public function setMeetingSex($v)
	{
		if ($v !== null) {
			$v = (int) $v;
		}

		if ($this->meeting_sex !== $v) {
			$this->meeting_sex = $v;
			$this->modifiedColumns[] = sfGuardUserPeer::MEETING_SEX;
		}

		return $this;
	} // setMeetingSex()

	/**
	 * Set the value of [hometown] column.
	 * 
	 * @param      string $v new value
	 * @return     sfGuardUser The current object (for fluent API support)
	 */
	public function setHometown($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->hometown !== $v) {
			$this->hometown = $v;
			$this->modifiedColumns[] = sfGuardUserPeer::HOMETOWN;
		}

		return $this;
	} // setHometown()

	/**
	 * Set the value of [borntown] column.
	 * 
	 * @param      string $v new value
	 * @return     sfGuardUser The current object (for fluent API support)
	 */
	public function setBorntown($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->borntown !== $v) {
			$this->borntown = $v;
			$this->modifiedColumns[] = sfGuardUserPeer::BORNTOWN;
		}

		return $this;
	} // setBorntown()

	/**
	 * Set the value of [smoker] column.
	 * 
	 * @param      int $v new value
	 * @return     sfGuardUser The current object (for fluent API support)
	 */
	public function setSmoker($v)
	{
		if ($v !== null) {
			$v = (int) $v;
		}

		if ($this->smoker !== $v) {
			$this->smoker = $v;
			$this->modifiedColumns[] = sfGuardUserPeer::SMOKER;
		}

		return $this;
	} // setSmoker()

	/**
	 * Set the value of [drinker] column.
	 * 
	 * @param      int $v new value
	 * @return     sfGuardUser The current object (for fluent API support)
	 */
	public function setDrinker($v)
	{
		if ($v !== null) {
			$v = (int) $v;
		}

		if ($this->drinker !== $v) {
			$this->drinker = $v;
			$this->modifiedColumns[] = sfGuardUserPeer::DRINKER;
		}

		return $this;
	} // setDrinker()

	/**
	 * Set the value of [education] column.
	 * 
	 * @param      string $v new value
	 * @return     sfGuardUser The current object (for fluent API support)
	 */
	public function setEducation($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->education !== $v) {
			$this->education = $v;
			$this->modifiedColumns[] = sfGuardUserPeer::EDUCATION;
		}

		return $this;
	} // setEducation()

	/**
	 * Set the value of [language] column.
	 * 
	 * @param      string $v new value
	 * @return     sfGuardUser The current object (for fluent API support)
	 */
	public function setLanguage($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->language !== $v) {
			$this->language = $v;
			$this->modifiedColumns[] = sfGuardUserPeer::LANGUAGE;
		}

		return $this;
	} // setLanguage()

	/**
	 * Set the value of [religion] column.
	 * 
	 * @param      string $v new value
	 * @return     sfGuardUser The current object (for fluent API support)
	 */
	public function setReligion($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->religion !== $v) {
			$this->religion = $v;
			$this->modifiedColumns[] = sfGuardUserPeer::RELIGION;
		}

		return $this;
	} // setReligion()

	/**
	 * Set the value of [politic] column.
	 * 
	 * @param      string $v new value
	 * @return     sfGuardUser The current object (for fluent API support)
	 */
	public function setPolitic($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->politic !== $v) {
			$this->politic = $v;
			$this->modifiedColumns[] = sfGuardUserPeer::POLITIC;
		}

		return $this;
	} // setPolitic()

	/**
	 * Set the value of [country] column.
	 * 
	 * @param      string $v new value
	 * @return     sfGuardUser The current object (for fluent API support)
	 */
	public function setCountry($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->country !== $v) {
			$this->country = $v;
			$this->modifiedColumns[] = sfGuardUserPeer::COUNTRY;
		}

		return $this;
	} // setCountry()

	/**
	 * Set the value of [city] column.
	 * 
	 * @param      string $v new value
	 * @return     sfGuardUser The current object (for fluent API support)
	 */
	public function setCity($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->city !== $v) {
			$this->city = $v;
			$this->modifiedColumns[] = sfGuardUserPeer::CITY;
		}

		return $this;
	} // setCity()

	/**
	 * Set the value of [cp] column.
	 * 
	 * @param      string $v new value
	 * @return     sfGuardUser The current object (for fluent API support)
	 */
	public function setCp($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->cp !== $v) {
			$this->cp = $v;
			$this->modifiedColumns[] = sfGuardUserPeer::CP;
		}

		return $this;
	} // setCp()

	/**
	 * Set the value of [description] column.
	 * 
	 * @param      string $v new value
	 * @return     sfGuardUser The current object (for fluent API support)
	 */
	public function setDescription($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->description !== $v) {
			$this->description = $v;
			$this->modifiedColumns[] = sfGuardUserPeer::DESCRIPTION;
		}

		return $this;
	} // setDescription()

	/**
	 * Set the value of [contact] column.
	 * 
	 * @param      string $v new value
	 * @return     sfGuardUser The current object (for fluent API support)
	 */
	public function setContact($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->contact !== $v) {
			$this->contact = $v;
			$this->modifiedColumns[] = sfGuardUserPeer::CONTACT;
		}

		return $this;
	} // setContact()

	/**
	 * Sets the value of [created_at] column to a normalized version of the date/time value specified.
	 * 
	 * @param      mixed $v string, integer (timestamp), or DateTime value.  Empty string will
	 *						be treated as NULL for temporal objects.
	 * @return     sfGuardUser The current object (for fluent API support)
	 */
	public function setCreatedAt($v)
	{
		// we treat '' as NULL for temporal objects because DateTime('') == DateTime('now')
		// -- which is unexpected, to say the least.
		if ($v === null || $v === '') {
			$dt = null;
		} elseif ($v instanceof DateTime) {
			$dt = $v;
		} else {
			// some string/numeric value passed; we normalize that so that we can
			// validate it.
			try {
				if (is_numeric($v)) { // if it's a unix timestamp
					$dt = new DateTime('@'.$v, new DateTimeZone('UTC'));
					// We have to explicitly specify and then change the time zone because of a
					// DateTime bug: http://bugs.php.net/bug.php?id=43003
					$dt->setTimeZone(new DateTimeZone(date_default_timezone_get()));
				} else {
					$dt = new DateTime($v);
				}
			} catch (Exception $x) {
				throw new PropelException('Error parsing date/time value: ' . var_export($v, true), $x);
			}
		}

		if ( $this->created_at !== null || $dt !== null ) {
			// (nested ifs are a little easier to read in this case)

			$currNorm = ($this->created_at !== null && $tmpDt = new DateTime($this->created_at)) ? $tmpDt->format('Y-m-d H:i:s') : null;
			$newNorm = ($dt !== null) ? $dt->format('Y-m-d H:i:s') : null;

			if ( ($currNorm !== $newNorm) // normalized values don't match 
					)
			{
				$this->created_at = ($dt ? $dt->format('Y-m-d H:i:s') : null);
				$this->modifiedColumns[] = sfGuardUserPeer::CREATED_AT;
			}
		} // if either are not null

		return $this;
	} // setCreatedAt()

	/**
	 * Sets the value of [last_login] column to a normalized version of the date/time value specified.
	 * 
	 * @param      mixed $v string, integer (timestamp), or DateTime value.  Empty string will
	 *						be treated as NULL for temporal objects.
	 * @return     sfGuardUser The current object (for fluent API support)
	 */
	public function setLastLogin($v)
	{
		// we treat '' as NULL for temporal objects because DateTime('') == DateTime('now')
		// -- which is unexpected, to say the least.
		if ($v === null || $v === '') {
			$dt = null;
		} elseif ($v instanceof DateTime) {
			$dt = $v;
		} else {
			// some string/numeric value passed; we normalize that so that we can
			// validate it.
			try {
				if (is_numeric($v)) { // if it's a unix timestamp
					$dt = new DateTime('@'.$v, new DateTimeZone('UTC'));
					// We have to explicitly specify and then change the time zone because of a
					// DateTime bug: http://bugs.php.net/bug.php?id=43003
					$dt->setTimeZone(new DateTimeZone(date_default_timezone_get()));
				} else {
					$dt = new DateTime($v);
				}
			} catch (Exception $x) {
				throw new PropelException('Error parsing date/time value: ' . var_export($v, true), $x);
			}
		}

		if ( $this->last_login !== null || $dt !== null ) {
			// (nested ifs are a little easier to read in this case)

			$currNorm = ($this->last_login !== null && $tmpDt = new DateTime($this->last_login)) ? $tmpDt->format('Y-m-d H:i:s') : null;
			$newNorm = ($dt !== null) ? $dt->format('Y-m-d H:i:s') : null;

			if ( ($currNorm !== $newNorm) // normalized values don't match 
					)
			{
				$this->last_login = ($dt ? $dt->format('Y-m-d H:i:s') : null);
				$this->modifiedColumns[] = sfGuardUserPeer::LAST_LOGIN;
			}
		} // if either are not null

		return $this;
	} // setLastLogin()

	/**
	 * Set the value of [is_active] column.
	 * 
	 * @param      boolean $v new value
	 * @return     sfGuardUser The current object (for fluent API support)
	 */
	public function setIsActive($v)
	{
		if ($v !== null) {
			$v = (boolean) $v;
		}

		if ($this->is_active !== $v || $this->isNew()) {
			$this->is_active = $v;
			$this->modifiedColumns[] = sfGuardUserPeer::IS_ACTIVE;
		}

		return $this;
	} // setIsActive()

	/**
	 * Set the value of [is_super_admin] column.
	 * 
	 * @param      boolean $v new value
	 * @return     sfGuardUser The current object (for fluent API support)
	 */
	public function setIsSuperAdmin($v)
	{
		if ($v !== null) {
			$v = (boolean) $v;
		}

		if ($this->is_super_admin !== $v || $this->isNew()) {
			$this->is_super_admin = $v;
			$this->modifiedColumns[] = sfGuardUserPeer::IS_SUPER_ADMIN;
		}

		return $this;
	} // setIsSuperAdmin()

	/**
	 * Indicates whether the columns in this object are only set to default values.
	 *
	 * This method can be used in conjunction with isModified() to indicate whether an object is both
	 * modified _and_ has some values set which are non-default.
	 *
	 * @return     boolean Whether the columns in this object are only been set with default values.
	 */
	public function hasOnlyDefaultValues()
	{
			if ($this->algorithm !== 'sha1') {
				return false;
			}

			if ($this->sex !== false) {
				return false;
			}

			if ($this->is_active !== false) {
				return false;
			}

			if ($this->is_super_admin !== false) {
				return false;
			}

		// otherwise, everything was equal, so return TRUE
		return true;
	} // hasOnlyDefaultValues()

	/**
	 * Hydrates (populates) the object variables with values from the database resultset.
	 *
	 * An offset (0-based "start column") is specified so that objects can be hydrated
	 * with a subset of the columns in the resultset rows.  This is needed, for example,
	 * for results of JOIN queries where the resultset row includes columns from two or
	 * more tables.
	 *
	 * @param      array $row The row returned by PDOStatement->fetch(PDO::FETCH_NUM)
	 * @param      int $startcol 0-based offset column which indicates which restultset column to start with.
	 * @param      boolean $rehydrate Whether this object is being re-hydrated from the database.
	 * @return     int next starting column
	 * @throws     PropelException  - Any caught Exception will be rewrapped as a PropelException.
	 */
	public function hydrate($row, $startcol = 0, $rehydrate = false)
	{
		try {

			$this->id = ($row[$startcol + 0] !== null) ? (int) $row[$startcol + 0] : null;
			$this->first_name = ($row[$startcol + 1] !== null) ? (string) $row[$startcol + 1] : null;
			$this->last_name = ($row[$startcol + 2] !== null) ? (string) $row[$startcol + 2] : null;
			$this->email_address = ($row[$startcol + 3] !== null) ? (string) $row[$startcol + 3] : null;
			$this->username = ($row[$startcol + 4] !== null) ? (string) $row[$startcol + 4] : null;
			$this->algorithm = ($row[$startcol + 5] !== null) ? (string) $row[$startcol + 5] : null;
			$this->salt = ($row[$startcol + 6] !== null) ? (string) $row[$startcol + 6] : null;
			$this->password = ($row[$startcol + 7] !== null) ? (string) $row[$startcol + 7] : null;
			$this->sex = ($row[$startcol + 8] !== null) ? (boolean) $row[$startcol + 8] : null;
			$this->birthday = ($row[$startcol + 9] !== null) ? (string) $row[$startcol + 9] : null;
			$this->aboutme = ($row[$startcol + 10] !== null) ? (string) $row[$startcol + 10] : null;
			$this->profession = ($row[$startcol + 11] !== null) ? (string) $row[$startcol + 11] : null;
			$this->music = ($row[$startcol + 12] !== null) ? (string) $row[$startcol + 12] : null;
			$this->books = ($row[$startcol + 13] !== null) ? (string) $row[$startcol + 13] : null;
			$this->films = ($row[$startcol + 14] !== null) ? (string) $row[$startcol + 14] : null;
			$this->television = ($row[$startcol + 15] !== null) ? (string) $row[$startcol + 15] : null;
			$this->games = ($row[$startcol + 16] !== null) ? (string) $row[$startcol + 16] : null;
			$this->marital_status = ($row[$startcol + 17] !== null) ? (int) $row[$startcol + 17] : null;
			$this->meeting_sex = ($row[$startcol + 18] !== null) ? (int) $row[$startcol + 18] : null;
			$this->hometown = ($row[$startcol + 19] !== null) ? (string) $row[$startcol + 19] : null;
			$this->borntown = ($row[$startcol + 20] !== null) ? (string) $row[$startcol + 20] : null;
			$this->smoker = ($row[$startcol + 21] !== null) ? (int) $row[$startcol + 21] : null;
			$this->drinker = ($row[$startcol + 22] !== null) ? (int) $row[$startcol + 22] : null;
			$this->education = ($row[$startcol + 23] !== null) ? (string) $row[$startcol + 23] : null;
			$this->language = ($row[$startcol + 24] !== null) ? (string) $row[$startcol + 24] : null;
			$this->religion = ($row[$startcol + 25] !== null) ? (string) $row[$startcol + 25] : null;
			$this->politic = ($row[$startcol + 26] !== null) ? (string) $row[$startcol + 26] : null;
			$this->country = ($row[$startcol + 27] !== null) ? (string) $row[$startcol + 27] : null;
			$this->city = ($row[$startcol + 28] !== null) ? (string) $row[$startcol + 28] : null;
			$this->cp = ($row[$startcol + 29] !== null) ? (string) $row[$startcol + 29] : null;
			$this->description = ($row[$startcol + 30] !== null) ? (string) $row[$startcol + 30] : null;
			$this->contact = ($row[$startcol + 31] !== null) ? (string) $row[$startcol + 31] : null;
			$this->created_at = ($row[$startcol + 32] !== null) ? (string) $row[$startcol + 32] : null;
			$this->last_login = ($row[$startcol + 33] !== null) ? (string) $row[$startcol + 33] : null;
			$this->is_active = ($row[$startcol + 34] !== null) ? (boolean) $row[$startcol + 34] : null;
			$this->is_super_admin = ($row[$startcol + 35] !== null) ? (boolean) $row[$startcol + 35] : null;
			$this->resetModified();

			$this->setNew(false);

			if ($rehydrate) {
				$this->ensureConsistency();
			}

			// FIXME - using NUM_COLUMNS may be clearer.
			return $startcol + 36; // 36 = sfGuardUserPeer::NUM_COLUMNS - sfGuardUserPeer::NUM_LAZY_LOAD_COLUMNS).

		} catch (Exception $e) {
			throw new PropelException("Error populating sfGuardUser object", $e);
		}
	}

	/**
	 * Checks and repairs the internal consistency of the object.
	 *
	 * This method is executed after an already-instantiated object is re-hydrated
	 * from the database.  It exists to check any foreign keys to make sure that
	 * the objects related to the current object are correct based on foreign key.
	 *
	 * You can override this method in the stub class, but you should always invoke
	 * the base method from the overridden method (i.e. parent::ensureConsistency()),
	 * in case your model changes.
	 *
	 * @throws     PropelException
	 */
	public function ensureConsistency()
	{

	} // ensureConsistency

	/**
	 * Reloads this object from datastore based on primary key and (optionally) resets all associated objects.
	 *
	 * This will only work if the object has been saved and has a valid primary key set.
	 *
	 * @param      boolean $deep (optional) Whether to also de-associated any related objects.
	 * @param      PropelPDO $con (optional) The PropelPDO connection to use.
	 * @return     void
	 * @throws     PropelException - if this object is deleted, unsaved or doesn't have pk match in db
	 */
	public function reload($deep = false, PropelPDO $con = null)
	{
		if ($this->isDeleted()) {
			throw new PropelException("Cannot reload a deleted object.");
		}

		if ($this->isNew()) {
			throw new PropelException("Cannot reload an unsaved object.");
		}

		if ($con === null) {
			$con = Propel::getConnection(sfGuardUserPeer::DATABASE_NAME, Propel::CONNECTION_READ);
		}

		// We don't need to alter the object instance pool; we're just modifying this instance
		// already in the pool.

		$stmt = sfGuardUserPeer::doSelectStmt($this->buildPkeyCriteria(), $con);
		$row = $stmt->fetch(PDO::FETCH_NUM);
		$stmt->closeCursor();
		if (!$row) {
			throw new PropelException('Cannot find matching row in the database to reload object values.');
		}
		$this->hydrate($row, 0, true); // rehydrate

		if ($deep) {  // also de-associate any related objects?

			$this->collinboxsRelatedByUserId = null;
			$this->lastinboxRelatedByUserIdCriteria = null;

			$this->collinboxsRelatedByDestUserId = null;
			$this->lastinboxRelatedByDestUserIdCriteria = null;

			$this->collsfGuardUserPermissions = null;
			$this->lastsfGuardUserPermissionCriteria = null;

			$this->collsfGuardUserGroups = null;
			$this->lastsfGuardUserGroupCriteria = null;

			$this->collsfGuardRememberKeys = null;
			$this->lastsfGuardRememberKeyCriteria = null;

			$this->singleSfguardforgotpassword = null;

			$this->collLocations = null;
			$this->lastLocationCriteria = null;

			$this->collFavlikesRelatedByUserId = null;
			$this->lastFavlikeRelatedByUserIdCriteria = null;

			$this->collFavlikesRelatedByDestUserId = null;
			$this->lastFavlikeRelatedByDestUserIdCriteria = null;

			$this->collCommentsRelatedByUserId = null;
			$this->lastCommentRelatedByUserIdCriteria = null;

			$this->collCommentsRelatedByDestUserId = null;
			$this->lastCommentRelatedByDestUserIdCriteria = null;

			$this->collPubssRelatedByUserId = null;
			$this->lastPubsRelatedByUserIdCriteria = null;

			$this->collPubssRelatedByDestUserId = null;
			$this->lastPubsRelatedByDestUserIdCriteria = null;

			$this->collAudiosRelatedByUserId = null;
			$this->lastAudioRelatedByUserIdCriteria = null;

			$this->collAudiosRelatedByDestUserId = null;
			$this->lastAudioRelatedByDestUserIdCriteria = null;

			$this->collPlaylists = null;
			$this->lastPlaylistCriteria = null;

			$this->collTexts = null;
			$this->lastTextCriteria = null;

			$this->collLinks = null;
			$this->lastLinkCriteria = null;

			$this->collFollowsRelatedByUserId = null;
			$this->lastFollowRelatedByUserIdCriteria = null;

			$this->collFollowsRelatedByFollowId = null;
			$this->lastFollowRelatedByFollowIdCriteria = null;

			$this->collNotificationsRelatedByUserId = null;
			$this->lastNotificationRelatedByUserIdCriteria = null;

			$this->collNotificationsRelatedByDestUserId = null;
			$this->lastNotificationRelatedByDestUserIdCriteria = null;

			$this->collSettingHasUsers = null;
			$this->lastSettingHasUserCriteria = null;

			$this->collEvents = null;
			$this->lastEventCriteria = null;

			$this->collAlbumPhotos = null;
			$this->lastAlbumPhotoCriteria = null;

			$this->collProfilePhotos = null;
			$this->lastProfilePhotoCriteria = null;

		} // if (deep)
	}

	/**
	 * Removes this object from datastore and sets delete attribute.
	 *
	 * @param      PropelPDO $con
	 * @return     void
	 * @throws     PropelException
	 * @see        BaseObject::setDeleted()
	 * @see        BaseObject::isDeleted()
	 */
	public function delete(PropelPDO $con = null)
	{
		if ($this->isDeleted()) {
			throw new PropelException("This object has already been deleted.");
		}

		if ($con === null) {
			$con = Propel::getConnection(sfGuardUserPeer::DATABASE_NAME, Propel::CONNECTION_WRITE);
		}
		
		$con->beginTransaction();
		try {
			$ret = $this->preDelete($con);
			// symfony_behaviors behavior
			foreach (sfMixer::getCallables('BasesfGuardUser:delete:pre') as $callable)
			{
			  if (call_user_func($callable, $this, $con))
			  {
			    $con->commit();
			
			    return;
			  }
			}

			if ($ret) {
				sfGuardUserPeer::doDelete($this, $con);
				$this->postDelete($con);
				// symfony_behaviors behavior
				foreach (sfMixer::getCallables('BasesfGuardUser:delete:post') as $callable)
				{
				  call_user_func($callable, $this, $con);
				}

				$this->setDeleted(true);
				$con->commit();
			} else {
				$con->commit();
			}
		} catch (PropelException $e) {
			$con->rollBack();
			throw $e;
		}
	}

	/**
	 * Persists this object to the database.
	 *
	 * If the object is new, it inserts it; otherwise an update is performed.
	 * All modified related objects will also be persisted in the doSave()
	 * method.  This method wraps all precipitate database operations in a
	 * single transaction.
	 *
	 * @param      PropelPDO $con
	 * @return     int The number of rows affected by this insert/update and any referring fk objects' save() operations.
	 * @throws     PropelException
	 * @see        doSave()
	 */
	public function save(PropelPDO $con = null)
	{
		if ($this->isDeleted()) {
			throw new PropelException("You cannot save an object that has been deleted.");
		}

		if ($con === null) {
			$con = Propel::getConnection(sfGuardUserPeer::DATABASE_NAME, Propel::CONNECTION_WRITE);
		}
		
		$con->beginTransaction();
		$isInsert = $this->isNew();
		try {
			$ret = $this->preSave($con);
			// symfony_behaviors behavior
			foreach (sfMixer::getCallables('BasesfGuardUser:save:pre') as $callable)
			{
			  if (is_integer($affectedRows = call_user_func($callable, $this, $con)))
			  {
			    $con->commit();
			
			    return $affectedRows;
			  }
			}

			// symfony_timestampable behavior
			
			if ($isInsert) {
				$ret = $ret && $this->preInsert($con);
				// symfony_timestampable behavior
				if (!$this->isColumnModified(sfGuardUserPeer::CREATED_AT))
				{
				  $this->setCreatedAt(time());
				}

			} else {
				$ret = $ret && $this->preUpdate($con);
			}
			if ($ret) {
				$affectedRows = $this->doSave($con);
				if ($isInsert) {
					$this->postInsert($con);
				} else {
					$this->postUpdate($con);
				}
				$this->postSave($con);
				// symfony_behaviors behavior
				foreach (sfMixer::getCallables('BasesfGuardUser:save:post') as $callable)
				{
				  call_user_func($callable, $this, $con, $affectedRows);
				}

				sfGuardUserPeer::addInstanceToPool($this);
			} else {
				$affectedRows = 0;
			}
			$con->commit();
			return $affectedRows;
		} catch (PropelException $e) {
			$con->rollBack();
			throw $e;
		}
	}

	/**
	 * Performs the work of inserting or updating the row in the database.
	 *
	 * If the object is new, it inserts it; otherwise an update is performed.
	 * All related objects are also updated in this method.
	 *
	 * @param      PropelPDO $con
	 * @return     int The number of rows affected by this insert/update and any referring fk objects' save() operations.
	 * @throws     PropelException
	 * @see        save()
	 */
	protected function doSave(PropelPDO $con)
	{
		$affectedRows = 0; // initialize var to track total num of affected rows
		if (!$this->alreadyInSave) {
			$this->alreadyInSave = true;

			if ($this->isNew() ) {
				$this->modifiedColumns[] = sfGuardUserPeer::ID;
			}

			// If this object has been modified, then save it to the database.
			if ($this->isModified()) {
				if ($this->isNew()) {
					$pk = sfGuardUserPeer::doInsert($this, $con);
					$affectedRows += 1; // we are assuming that there is only 1 row per doInsert() which
										 // should always be true here (even though technically
										 // BasePeer::doInsert() can insert multiple rows).

					$this->setId($pk);  //[IMV] update autoincrement primary key

					$this->setNew(false);
				} else {
					$affectedRows += sfGuardUserPeer::doUpdate($this, $con);
				}

				$this->resetModified(); // [HL] After being saved an object is no longer 'modified'
			}

			if ($this->collinboxsRelatedByUserId !== null) {
				foreach ($this->collinboxsRelatedByUserId as $referrerFK) {
					if (!$referrerFK->isDeleted()) {
						$affectedRows += $referrerFK->save($con);
					}
				}
			}

			if ($this->collinboxsRelatedByDestUserId !== null) {
				foreach ($this->collinboxsRelatedByDestUserId as $referrerFK) {
					if (!$referrerFK->isDeleted()) {
						$affectedRows += $referrerFK->save($con);
					}
				}
			}

			if ($this->collsfGuardUserPermissions !== null) {
				foreach ($this->collsfGuardUserPermissions as $referrerFK) {
					if (!$referrerFK->isDeleted()) {
						$affectedRows += $referrerFK->save($con);
					}
				}
			}

			if ($this->collsfGuardUserGroups !== null) {
				foreach ($this->collsfGuardUserGroups as $referrerFK) {
					if (!$referrerFK->isDeleted()) {
						$affectedRows += $referrerFK->save($con);
					}
				}
			}

			if ($this->collsfGuardRememberKeys !== null) {
				foreach ($this->collsfGuardRememberKeys as $referrerFK) {
					if (!$referrerFK->isDeleted()) {
						$affectedRows += $referrerFK->save($con);
					}
				}
			}

			if ($this->singleSfguardforgotpassword !== null) {
				if (!$this->singleSfguardforgotpassword->isDeleted()) {
						$affectedRows += $this->singleSfguardforgotpassword->save($con);
				}
			}

			if ($this->collLocations !== null) {
				foreach ($this->collLocations as $referrerFK) {
					if (!$referrerFK->isDeleted()) {
						$affectedRows += $referrerFK->save($con);
					}
				}
			}

			if ($this->collFavlikesRelatedByUserId !== null) {
				foreach ($this->collFavlikesRelatedByUserId as $referrerFK) {
					if (!$referrerFK->isDeleted()) {
						$affectedRows += $referrerFK->save($con);
					}
				}
			}

			if ($this->collFavlikesRelatedByDestUserId !== null) {
				foreach ($this->collFavlikesRelatedByDestUserId as $referrerFK) {
					if (!$referrerFK->isDeleted()) {
						$affectedRows += $referrerFK->save($con);
					}
				}
			}

			if ($this->collCommentsRelatedByUserId !== null) {
				foreach ($this->collCommentsRelatedByUserId as $referrerFK) {
					if (!$referrerFK->isDeleted()) {
						$affectedRows += $referrerFK->save($con);
					}
				}
			}

			if ($this->collCommentsRelatedByDestUserId !== null) {
				foreach ($this->collCommentsRelatedByDestUserId as $referrerFK) {
					if (!$referrerFK->isDeleted()) {
						$affectedRows += $referrerFK->save($con);
					}
				}
			}

			if ($this->collPubssRelatedByUserId !== null) {
				foreach ($this->collPubssRelatedByUserId as $referrerFK) {
					if (!$referrerFK->isDeleted()) {
						$affectedRows += $referrerFK->save($con);
					}
				}
			}

			if ($this->collPubssRelatedByDestUserId !== null) {
				foreach ($this->collPubssRelatedByDestUserId as $referrerFK) {
					if (!$referrerFK->isDeleted()) {
						$affectedRows += $referrerFK->save($con);
					}
				}
			}

			if ($this->collAudiosRelatedByUserId !== null) {
				foreach ($this->collAudiosRelatedByUserId as $referrerFK) {
					if (!$referrerFK->isDeleted()) {
						$affectedRows += $referrerFK->save($con);
					}
				}
			}

			if ($this->collAudiosRelatedByDestUserId !== null) {
				foreach ($this->collAudiosRelatedByDestUserId as $referrerFK) {
					if (!$referrerFK->isDeleted()) {
						$affectedRows += $referrerFK->save($con);
					}
				}
			}

			if ($this->collPlaylists !== null) {
				foreach ($this->collPlaylists as $referrerFK) {
					if (!$referrerFK->isDeleted()) {
						$affectedRows += $referrerFK->save($con);
					}
				}
			}

			if ($this->collTexts !== null) {
				foreach ($this->collTexts as $referrerFK) {
					if (!$referrerFK->isDeleted()) {
						$affectedRows += $referrerFK->save($con);
					}
				}
			}

			if ($this->collLinks !== null) {
				foreach ($this->collLinks as $referrerFK) {
					if (!$referrerFK->isDeleted()) {
						$affectedRows += $referrerFK->save($con);
					}
				}
			}

			if ($this->collFollowsRelatedByUserId !== null) {
				foreach ($this->collFollowsRelatedByUserId as $referrerFK) {
					if (!$referrerFK->isDeleted()) {
						$affectedRows += $referrerFK->save($con);
					}
				}
			}

			if ($this->collFollowsRelatedByFollowId !== null) {
				foreach ($this->collFollowsRelatedByFollowId as $referrerFK) {
					if (!$referrerFK->isDeleted()) {
						$affectedRows += $referrerFK->save($con);
					}
				}
			}

			if ($this->collNotificationsRelatedByUserId !== null) {
				foreach ($this->collNotificationsRelatedByUserId as $referrerFK) {
					if (!$referrerFK->isDeleted()) {
						$affectedRows += $referrerFK->save($con);
					}
				}
			}

			if ($this->collNotificationsRelatedByDestUserId !== null) {
				foreach ($this->collNotificationsRelatedByDestUserId as $referrerFK) {
					if (!$referrerFK->isDeleted()) {
						$affectedRows += $referrerFK->save($con);
					}
				}
			}

			if ($this->collSettingHasUsers !== null) {
				foreach ($this->collSettingHasUsers as $referrerFK) {
					if (!$referrerFK->isDeleted()) {
						$affectedRows += $referrerFK->save($con);
					}
				}
			}

			if ($this->collEvents !== null) {
				foreach ($this->collEvents as $referrerFK) {
					if (!$referrerFK->isDeleted()) {
						$affectedRows += $referrerFK->save($con);
					}
				}
			}

			if ($this->collAlbumPhotos !== null) {
				foreach ($this->collAlbumPhotos as $referrerFK) {
					if (!$referrerFK->isDeleted()) {
						$affectedRows += $referrerFK->save($con);
					}
				}
			}

			if ($this->collProfilePhotos !== null) {
				foreach ($this->collProfilePhotos as $referrerFK) {
					if (!$referrerFK->isDeleted()) {
						$affectedRows += $referrerFK->save($con);
					}
				}
			}

			$this->alreadyInSave = false;

		}
		return $affectedRows;
	} // doSave()

	/**
	 * Array of ValidationFailed objects.
	 * @var        array ValidationFailed[]
	 */
	protected $validationFailures = array();

	/**
	 * Gets any ValidationFailed objects that resulted from last call to validate().
	 *
	 *
	 * @return     array ValidationFailed[]
	 * @see        validate()
	 */
	public function getValidationFailures()
	{
		return $this->validationFailures;
	}

	/**
	 * Validates the objects modified field values and all objects related to this table.
	 *
	 * If $columns is either a column name or an array of column names
	 * only those columns are validated.
	 *
	 * @param      mixed $columns Column name or an array of column names.
	 * @return     boolean Whether all columns pass validation.
	 * @see        doValidate()
	 * @see        getValidationFailures()
	 */
	public function validate($columns = null)
	{
		$res = $this->doValidate($columns);
		if ($res === true) {
			$this->validationFailures = array();
			return true;
		} else {
			$this->validationFailures = $res;
			return false;
		}
	}

	/**
	 * This function performs the validation work for complex object models.
	 *
	 * In addition to checking the current object, all related objects will
	 * also be validated.  If all pass then <code>true</code> is returned; otherwise
	 * an aggreagated array of ValidationFailed objects will be returned.
	 *
	 * @param      array $columns Array of column names to validate.
	 * @return     mixed <code>true</code> if all validations pass; array of <code>ValidationFailed</code> objets otherwise.
	 */
	protected function doValidate($columns = null)
	{
		if (!$this->alreadyInValidation) {
			$this->alreadyInValidation = true;
			$retval = null;

			$failureMap = array();


			if (($retval = sfGuardUserPeer::doValidate($this, $columns)) !== true) {
				$failureMap = array_merge($failureMap, $retval);
			}


				if ($this->collinboxsRelatedByUserId !== null) {
					foreach ($this->collinboxsRelatedByUserId as $referrerFK) {
						if (!$referrerFK->validate($columns)) {
							$failureMap = array_merge($failureMap, $referrerFK->getValidationFailures());
						}
					}
				}

				if ($this->collinboxsRelatedByDestUserId !== null) {
					foreach ($this->collinboxsRelatedByDestUserId as $referrerFK) {
						if (!$referrerFK->validate($columns)) {
							$failureMap = array_merge($failureMap, $referrerFK->getValidationFailures());
						}
					}
				}

				if ($this->collsfGuardUserPermissions !== null) {
					foreach ($this->collsfGuardUserPermissions as $referrerFK) {
						if (!$referrerFK->validate($columns)) {
							$failureMap = array_merge($failureMap, $referrerFK->getValidationFailures());
						}
					}
				}

				if ($this->collsfGuardUserGroups !== null) {
					foreach ($this->collsfGuardUserGroups as $referrerFK) {
						if (!$referrerFK->validate($columns)) {
							$failureMap = array_merge($failureMap, $referrerFK->getValidationFailures());
						}
					}
				}

				if ($this->collsfGuardRememberKeys !== null) {
					foreach ($this->collsfGuardRememberKeys as $referrerFK) {
						if (!$referrerFK->validate($columns)) {
							$failureMap = array_merge($failureMap, $referrerFK->getValidationFailures());
						}
					}
				}

				if ($this->singleSfguardforgotpassword !== null) {
					if (!$this->singleSfguardforgotpassword->validate($columns)) {
						$failureMap = array_merge($failureMap, $this->singleSfguardforgotpassword->getValidationFailures());
					}
				}

				if ($this->collLocations !== null) {
					foreach ($this->collLocations as $referrerFK) {
						if (!$referrerFK->validate($columns)) {
							$failureMap = array_merge($failureMap, $referrerFK->getValidationFailures());
						}
					}
				}

				if ($this->collFavlikesRelatedByUserId !== null) {
					foreach ($this->collFavlikesRelatedByUserId as $referrerFK) {
						if (!$referrerFK->validate($columns)) {
							$failureMap = array_merge($failureMap, $referrerFK->getValidationFailures());
						}
					}
				}

				if ($this->collFavlikesRelatedByDestUserId !== null) {
					foreach ($this->collFavlikesRelatedByDestUserId as $referrerFK) {
						if (!$referrerFK->validate($columns)) {
							$failureMap = array_merge($failureMap, $referrerFK->getValidationFailures());
						}
					}
				}

				if ($this->collCommentsRelatedByUserId !== null) {
					foreach ($this->collCommentsRelatedByUserId as $referrerFK) {
						if (!$referrerFK->validate($columns)) {
							$failureMap = array_merge($failureMap, $referrerFK->getValidationFailures());
						}
					}
				}

				if ($this->collCommentsRelatedByDestUserId !== null) {
					foreach ($this->collCommentsRelatedByDestUserId as $referrerFK) {
						if (!$referrerFK->validate($columns)) {
							$failureMap = array_merge($failureMap, $referrerFK->getValidationFailures());
						}
					}
				}

				if ($this->collPubssRelatedByUserId !== null) {
					foreach ($this->collPubssRelatedByUserId as $referrerFK) {
						if (!$referrerFK->validate($columns)) {
							$failureMap = array_merge($failureMap, $referrerFK->getValidationFailures());
						}
					}
				}

				if ($this->collPubssRelatedByDestUserId !== null) {
					foreach ($this->collPubssRelatedByDestUserId as $referrerFK) {
						if (!$referrerFK->validate($columns)) {
							$failureMap = array_merge($failureMap, $referrerFK->getValidationFailures());
						}
					}
				}

				if ($this->collAudiosRelatedByUserId !== null) {
					foreach ($this->collAudiosRelatedByUserId as $referrerFK) {
						if (!$referrerFK->validate($columns)) {
							$failureMap = array_merge($failureMap, $referrerFK->getValidationFailures());
						}
					}
				}

				if ($this->collAudiosRelatedByDestUserId !== null) {
					foreach ($this->collAudiosRelatedByDestUserId as $referrerFK) {
						if (!$referrerFK->validate($columns)) {
							$failureMap = array_merge($failureMap, $referrerFK->getValidationFailures());
						}
					}
				}

				if ($this->collPlaylists !== null) {
					foreach ($this->collPlaylists as $referrerFK) {
						if (!$referrerFK->validate($columns)) {
							$failureMap = array_merge($failureMap, $referrerFK->getValidationFailures());
						}
					}
				}

				if ($this->collTexts !== null) {
					foreach ($this->collTexts as $referrerFK) {
						if (!$referrerFK->validate($columns)) {
							$failureMap = array_merge($failureMap, $referrerFK->getValidationFailures());
						}
					}
				}

				if ($this->collLinks !== null) {
					foreach ($this->collLinks as $referrerFK) {
						if (!$referrerFK->validate($columns)) {
							$failureMap = array_merge($failureMap, $referrerFK->getValidationFailures());
						}
					}
				}

				if ($this->collFollowsRelatedByUserId !== null) {
					foreach ($this->collFollowsRelatedByUserId as $referrerFK) {
						if (!$referrerFK->validate($columns)) {
							$failureMap = array_merge($failureMap, $referrerFK->getValidationFailures());
						}
					}
				}

				if ($this->collFollowsRelatedByFollowId !== null) {
					foreach ($this->collFollowsRelatedByFollowId as $referrerFK) {
						if (!$referrerFK->validate($columns)) {
							$failureMap = array_merge($failureMap, $referrerFK->getValidationFailures());
						}
					}
				}

				if ($this->collNotificationsRelatedByUserId !== null) {
					foreach ($this->collNotificationsRelatedByUserId as $referrerFK) {
						if (!$referrerFK->validate($columns)) {
							$failureMap = array_merge($failureMap, $referrerFK->getValidationFailures());
						}
					}
				}

				if ($this->collNotificationsRelatedByDestUserId !== null) {
					foreach ($this->collNotificationsRelatedByDestUserId as $referrerFK) {
						if (!$referrerFK->validate($columns)) {
							$failureMap = array_merge($failureMap, $referrerFK->getValidationFailures());
						}
					}
				}

				if ($this->collSettingHasUsers !== null) {
					foreach ($this->collSettingHasUsers as $referrerFK) {
						if (!$referrerFK->validate($columns)) {
							$failureMap = array_merge($failureMap, $referrerFK->getValidationFailures());
						}
					}
				}

				if ($this->collEvents !== null) {
					foreach ($this->collEvents as $referrerFK) {
						if (!$referrerFK->validate($columns)) {
							$failureMap = array_merge($failureMap, $referrerFK->getValidationFailures());
						}
					}
				}

				if ($this->collAlbumPhotos !== null) {
					foreach ($this->collAlbumPhotos as $referrerFK) {
						if (!$referrerFK->validate($columns)) {
							$failureMap = array_merge($failureMap, $referrerFK->getValidationFailures());
						}
					}
				}

				if ($this->collProfilePhotos !== null) {
					foreach ($this->collProfilePhotos as $referrerFK) {
						if (!$referrerFK->validate($columns)) {
							$failureMap = array_merge($failureMap, $referrerFK->getValidationFailures());
						}
					}
				}


			$this->alreadyInValidation = false;
		}

		return (!empty($failureMap) ? $failureMap : true);
	}

	/**
	 * Retrieves a field from the object by name passed in as a string.
	 *
	 * @param      string $name name
	 * @param      string $type The type of fieldname the $name is of:
	 *                     one of the class type constants BasePeer::TYPE_PHPNAME, BasePeer::TYPE_STUDLYPHPNAME
	 *                     BasePeer::TYPE_COLNAME, BasePeer::TYPE_FIELDNAME, BasePeer::TYPE_NUM
	 * @return     mixed Value of field.
	 */
	public function getByName($name, $type = BasePeer::TYPE_PHPNAME)
	{
		$pos = sfGuardUserPeer::translateFieldName($name, $type, BasePeer::TYPE_NUM);
		$field = $this->getByPosition($pos);
		return $field;
	}

	/**
	 * Retrieves a field from the object by Position as specified in the xml schema.
	 * Zero-based.
	 *
	 * @param      int $pos position in xml schema
	 * @return     mixed Value of field at $pos
	 */
	public function getByPosition($pos)
	{
		switch($pos) {
			case 0:
				return $this->getId();
				break;
			case 1:
				return $this->getFirstName();
				break;
			case 2:
				return $this->getLastName();
				break;
			case 3:
				return $this->getEmailAddress();
				break;
			case 4:
				return $this->getUsername();
				break;
			case 5:
				return $this->getAlgorithm();
				break;
			case 6:
				return $this->getSalt();
				break;
			case 7:
				return $this->getPassword();
				break;
			case 8:
				return $this->getSex();
				break;
			case 9:
				return $this->getBirthday();
				break;
			case 10:
				return $this->getAboutme();
				break;
			case 11:
				return $this->getProfession();
				break;
			case 12:
				return $this->getMusic();
				break;
			case 13:
				return $this->getBooks();
				break;
			case 14:
				return $this->getFilms();
				break;
			case 15:
				return $this->getTelevision();
				break;
			case 16:
				return $this->getGames();
				break;
			case 17:
				return $this->getMaritalStatus();
				break;
			case 18:
				return $this->getMeetingSex();
				break;
			case 19:
				return $this->getHometown();
				break;
			case 20:
				return $this->getBorntown();
				break;
			case 21:
				return $this->getSmoker();
				break;
			case 22:
				return $this->getDrinker();
				break;
			case 23:
				return $this->getEducation();
				break;
			case 24:
				return $this->getLanguage();
				break;
			case 25:
				return $this->getReligion();
				break;
			case 26:
				return $this->getPolitic();
				break;
			case 27:
				return $this->getCountry();
				break;
			case 28:
				return $this->getCity();
				break;
			case 29:
				return $this->getCp();
				break;
			case 30:
				return $this->getDescription();
				break;
			case 31:
				return $this->getContact();
				break;
			case 32:
				return $this->getCreatedAt();
				break;
			case 33:
				return $this->getLastLogin();
				break;
			case 34:
				return $this->getIsActive();
				break;
			case 35:
				return $this->getIsSuperAdmin();
				break;
			default:
				return null;
				break;
		} // switch()
	}

	/**
	 * Exports the object as an array.
	 *
	 * You can specify the key type of the array by passing one of the class
	 * type constants.
	 *
	 * @param      string $keyType (optional) One of the class type constants BasePeer::TYPE_PHPNAME, BasePeer::TYPE_STUDLYPHPNAME
	 *                        BasePeer::TYPE_COLNAME, BasePeer::TYPE_FIELDNAME, BasePeer::TYPE_NUM. Defaults to BasePeer::TYPE_PHPNAME.
	 * @param      boolean $includeLazyLoadColumns (optional) Whether to include lazy loaded columns.  Defaults to TRUE.
	 * @return     an associative array containing the field names (as keys) and field values
	 */
	public function toArray($keyType = BasePeer::TYPE_PHPNAME, $includeLazyLoadColumns = true)
	{
		$keys = sfGuardUserPeer::getFieldNames($keyType);
		$result = array(
			$keys[0] => $this->getId(),
			$keys[1] => $this->getFirstName(),
			$keys[2] => $this->getLastName(),
			$keys[3] => $this->getEmailAddress(),
			$keys[4] => $this->getUsername(),
			$keys[5] => $this->getAlgorithm(),
			$keys[6] => $this->getSalt(),
			$keys[7] => $this->getPassword(),
			$keys[8] => $this->getSex(),
			$keys[9] => $this->getBirthday(),
			$keys[10] => $this->getAboutme(),
			$keys[11] => $this->getProfession(),
			$keys[12] => $this->getMusic(),
			$keys[13] => $this->getBooks(),
			$keys[14] => $this->getFilms(),
			$keys[15] => $this->getTelevision(),
			$keys[16] => $this->getGames(),
			$keys[17] => $this->getMaritalStatus(),
			$keys[18] => $this->getMeetingSex(),
			$keys[19] => $this->getHometown(),
			$keys[20] => $this->getBorntown(),
			$keys[21] => $this->getSmoker(),
			$keys[22] => $this->getDrinker(),
			$keys[23] => $this->getEducation(),
			$keys[24] => $this->getLanguage(),
			$keys[25] => $this->getReligion(),
			$keys[26] => $this->getPolitic(),
			$keys[27] => $this->getCountry(),
			$keys[28] => $this->getCity(),
			$keys[29] => $this->getCp(),
			$keys[30] => $this->getDescription(),
			$keys[31] => $this->getContact(),
			$keys[32] => $this->getCreatedAt(),
			$keys[33] => $this->getLastLogin(),
			$keys[34] => $this->getIsActive(),
			$keys[35] => $this->getIsSuperAdmin(),
		);
		return $result;
	}

	/**
	 * Sets a field from the object by name passed in as a string.
	 *
	 * @param      string $name peer name
	 * @param      mixed $value field value
	 * @param      string $type The type of fieldname the $name is of:
	 *                     one of the class type constants BasePeer::TYPE_PHPNAME, BasePeer::TYPE_STUDLYPHPNAME
	 *                     BasePeer::TYPE_COLNAME, BasePeer::TYPE_FIELDNAME, BasePeer::TYPE_NUM
	 * @return     void
	 */
	public function setByName($name, $value, $type = BasePeer::TYPE_PHPNAME)
	{
		$pos = sfGuardUserPeer::translateFieldName($name, $type, BasePeer::TYPE_NUM);
		return $this->setByPosition($pos, $value);
	}

	/**
	 * Sets a field from the object by Position as specified in the xml schema.
	 * Zero-based.
	 *
	 * @param      int $pos position in xml schema
	 * @param      mixed $value field value
	 * @return     void
	 */
	public function setByPosition($pos, $value)
	{
		switch($pos) {
			case 0:
				$this->setId($value);
				break;
			case 1:
				$this->setFirstName($value);
				break;
			case 2:
				$this->setLastName($value);
				break;
			case 3:
				$this->setEmailAddress($value);
				break;
			case 4:
				$this->setUsername($value);
				break;
			case 5:
				$this->setAlgorithm($value);
				break;
			case 6:
				$this->setSalt($value);
				break;
			case 7:
				$this->setPassword($value);
				break;
			case 8:
				$this->setSex($value);
				break;
			case 9:
				$this->setBirthday($value);
				break;
			case 10:
				$this->setAboutme($value);
				break;
			case 11:
				$this->setProfession($value);
				break;
			case 12:
				$this->setMusic($value);
				break;
			case 13:
				$this->setBooks($value);
				break;
			case 14:
				$this->setFilms($value);
				break;
			case 15:
				$this->setTelevision($value);
				break;
			case 16:
				$this->setGames($value);
				break;
			case 17:
				$this->setMaritalStatus($value);
				break;
			case 18:
				$this->setMeetingSex($value);
				break;
			case 19:
				$this->setHometown($value);
				break;
			case 20:
				$this->setBorntown($value);
				break;
			case 21:
				$this->setSmoker($value);
				break;
			case 22:
				$this->setDrinker($value);
				break;
			case 23:
				$this->setEducation($value);
				break;
			case 24:
				$this->setLanguage($value);
				break;
			case 25:
				$this->setReligion($value);
				break;
			case 26:
				$this->setPolitic($value);
				break;
			case 27:
				$this->setCountry($value);
				break;
			case 28:
				$this->setCity($value);
				break;
			case 29:
				$this->setCp($value);
				break;
			case 30:
				$this->setDescription($value);
				break;
			case 31:
				$this->setContact($value);
				break;
			case 32:
				$this->setCreatedAt($value);
				break;
			case 33:
				$this->setLastLogin($value);
				break;
			case 34:
				$this->setIsActive($value);
				break;
			case 35:
				$this->setIsSuperAdmin($value);
				break;
		} // switch()
	}

	/**
	 * Populates the object using an array.
	 *
	 * This is particularly useful when populating an object from one of the
	 * request arrays (e.g. $_POST).  This method goes through the column
	 * names, checking to see whether a matching key exists in populated
	 * array. If so the setByName() method is called for that column.
	 *
	 * You can specify the key type of the array by additionally passing one
	 * of the class type constants BasePeer::TYPE_PHPNAME, BasePeer::TYPE_STUDLYPHPNAME,
	 * BasePeer::TYPE_COLNAME, BasePeer::TYPE_FIELDNAME, BasePeer::TYPE_NUM.
	 * The default key type is the column's phpname (e.g. 'AuthorId')
	 *
	 * @param      array  $arr     An array to populate the object from.
	 * @param      string $keyType The type of keys the array uses.
	 * @return     void
	 */
	public function fromArray($arr, $keyType = BasePeer::TYPE_PHPNAME)
	{
		$keys = sfGuardUserPeer::getFieldNames($keyType);

		if (array_key_exists($keys[0], $arr)) $this->setId($arr[$keys[0]]);
		if (array_key_exists($keys[1], $arr)) $this->setFirstName($arr[$keys[1]]);
		if (array_key_exists($keys[2], $arr)) $this->setLastName($arr[$keys[2]]);
		if (array_key_exists($keys[3], $arr)) $this->setEmailAddress($arr[$keys[3]]);
		if (array_key_exists($keys[4], $arr)) $this->setUsername($arr[$keys[4]]);
		if (array_key_exists($keys[5], $arr)) $this->setAlgorithm($arr[$keys[5]]);
		if (array_key_exists($keys[6], $arr)) $this->setSalt($arr[$keys[6]]);
		if (array_key_exists($keys[7], $arr)) $this->setPassword($arr[$keys[7]]);
		if (array_key_exists($keys[8], $arr)) $this->setSex($arr[$keys[8]]);
		if (array_key_exists($keys[9], $arr)) $this->setBirthday($arr[$keys[9]]);
		if (array_key_exists($keys[10], $arr)) $this->setAboutme($arr[$keys[10]]);
		if (array_key_exists($keys[11], $arr)) $this->setProfession($arr[$keys[11]]);
		if (array_key_exists($keys[12], $arr)) $this->setMusic($arr[$keys[12]]);
		if (array_key_exists($keys[13], $arr)) $this->setBooks($arr[$keys[13]]);
		if (array_key_exists($keys[14], $arr)) $this->setFilms($arr[$keys[14]]);
		if (array_key_exists($keys[15], $arr)) $this->setTelevision($arr[$keys[15]]);
		if (array_key_exists($keys[16], $arr)) $this->setGames($arr[$keys[16]]);
		if (array_key_exists($keys[17], $arr)) $this->setMaritalStatus($arr[$keys[17]]);
		if (array_key_exists($keys[18], $arr)) $this->setMeetingSex($arr[$keys[18]]);
		if (array_key_exists($keys[19], $arr)) $this->setHometown($arr[$keys[19]]);
		if (array_key_exists($keys[20], $arr)) $this->setBorntown($arr[$keys[20]]);
		if (array_key_exists($keys[21], $arr)) $this->setSmoker($arr[$keys[21]]);
		if (array_key_exists($keys[22], $arr)) $this->setDrinker($arr[$keys[22]]);
		if (array_key_exists($keys[23], $arr)) $this->setEducation($arr[$keys[23]]);
		if (array_key_exists($keys[24], $arr)) $this->setLanguage($arr[$keys[24]]);
		if (array_key_exists($keys[25], $arr)) $this->setReligion($arr[$keys[25]]);
		if (array_key_exists($keys[26], $arr)) $this->setPolitic($arr[$keys[26]]);
		if (array_key_exists($keys[27], $arr)) $this->setCountry($arr[$keys[27]]);
		if (array_key_exists($keys[28], $arr)) $this->setCity($arr[$keys[28]]);
		if (array_key_exists($keys[29], $arr)) $this->setCp($arr[$keys[29]]);
		if (array_key_exists($keys[30], $arr)) $this->setDescription($arr[$keys[30]]);
		if (array_key_exists($keys[31], $arr)) $this->setContact($arr[$keys[31]]);
		if (array_key_exists($keys[32], $arr)) $this->setCreatedAt($arr[$keys[32]]);
		if (array_key_exists($keys[33], $arr)) $this->setLastLogin($arr[$keys[33]]);
		if (array_key_exists($keys[34], $arr)) $this->setIsActive($arr[$keys[34]]);
		if (array_key_exists($keys[35], $arr)) $this->setIsSuperAdmin($arr[$keys[35]]);
	}

	/**
	 * Build a Criteria object containing the values of all modified columns in this object.
	 *
	 * @return     Criteria The Criteria object containing all modified values.
	 */
	public function buildCriteria()
	{
		$criteria = new Criteria(sfGuardUserPeer::DATABASE_NAME);

		if ($this->isColumnModified(sfGuardUserPeer::ID)) $criteria->add(sfGuardUserPeer::ID, $this->id);
		if ($this->isColumnModified(sfGuardUserPeer::FIRST_NAME)) $criteria->add(sfGuardUserPeer::FIRST_NAME, $this->first_name);
		if ($this->isColumnModified(sfGuardUserPeer::LAST_NAME)) $criteria->add(sfGuardUserPeer::LAST_NAME, $this->last_name);
		if ($this->isColumnModified(sfGuardUserPeer::EMAIL_ADDRESS)) $criteria->add(sfGuardUserPeer::EMAIL_ADDRESS, $this->email_address);
		if ($this->isColumnModified(sfGuardUserPeer::USERNAME)) $criteria->add(sfGuardUserPeer::USERNAME, $this->username);
		if ($this->isColumnModified(sfGuardUserPeer::ALGORITHM)) $criteria->add(sfGuardUserPeer::ALGORITHM, $this->algorithm);
		if ($this->isColumnModified(sfGuardUserPeer::SALT)) $criteria->add(sfGuardUserPeer::SALT, $this->salt);
		if ($this->isColumnModified(sfGuardUserPeer::PASSWORD)) $criteria->add(sfGuardUserPeer::PASSWORD, $this->password);
		if ($this->isColumnModified(sfGuardUserPeer::SEX)) $criteria->add(sfGuardUserPeer::SEX, $this->sex);
		if ($this->isColumnModified(sfGuardUserPeer::BIRTHDAY)) $criteria->add(sfGuardUserPeer::BIRTHDAY, $this->birthday);
		if ($this->isColumnModified(sfGuardUserPeer::ABOUTME)) $criteria->add(sfGuardUserPeer::ABOUTME, $this->aboutme);
		if ($this->isColumnModified(sfGuardUserPeer::PROFESSION)) $criteria->add(sfGuardUserPeer::PROFESSION, $this->profession);
		if ($this->isColumnModified(sfGuardUserPeer::MUSIC)) $criteria->add(sfGuardUserPeer::MUSIC, $this->music);
		if ($this->isColumnModified(sfGuardUserPeer::BOOKS)) $criteria->add(sfGuardUserPeer::BOOKS, $this->books);
		if ($this->isColumnModified(sfGuardUserPeer::FILMS)) $criteria->add(sfGuardUserPeer::FILMS, $this->films);
		if ($this->isColumnModified(sfGuardUserPeer::TELEVISION)) $criteria->add(sfGuardUserPeer::TELEVISION, $this->television);
		if ($this->isColumnModified(sfGuardUserPeer::GAMES)) $criteria->add(sfGuardUserPeer::GAMES, $this->games);
		if ($this->isColumnModified(sfGuardUserPeer::MARITAL_STATUS)) $criteria->add(sfGuardUserPeer::MARITAL_STATUS, $this->marital_status);
		if ($this->isColumnModified(sfGuardUserPeer::MEETING_SEX)) $criteria->add(sfGuardUserPeer::MEETING_SEX, $this->meeting_sex);
		if ($this->isColumnModified(sfGuardUserPeer::HOMETOWN)) $criteria->add(sfGuardUserPeer::HOMETOWN, $this->hometown);
		if ($this->isColumnModified(sfGuardUserPeer::BORNTOWN)) $criteria->add(sfGuardUserPeer::BORNTOWN, $this->borntown);
		if ($this->isColumnModified(sfGuardUserPeer::SMOKER)) $criteria->add(sfGuardUserPeer::SMOKER, $this->smoker);
		if ($this->isColumnModified(sfGuardUserPeer::DRINKER)) $criteria->add(sfGuardUserPeer::DRINKER, $this->drinker);
		if ($this->isColumnModified(sfGuardUserPeer::EDUCATION)) $criteria->add(sfGuardUserPeer::EDUCATION, $this->education);
		if ($this->isColumnModified(sfGuardUserPeer::LANGUAGE)) $criteria->add(sfGuardUserPeer::LANGUAGE, $this->language);
		if ($this->isColumnModified(sfGuardUserPeer::RELIGION)) $criteria->add(sfGuardUserPeer::RELIGION, $this->religion);
		if ($this->isColumnModified(sfGuardUserPeer::POLITIC)) $criteria->add(sfGuardUserPeer::POLITIC, $this->politic);
		if ($this->isColumnModified(sfGuardUserPeer::COUNTRY)) $criteria->add(sfGuardUserPeer::COUNTRY, $this->country);
		if ($this->isColumnModified(sfGuardUserPeer::CITY)) $criteria->add(sfGuardUserPeer::CITY, $this->city);
		if ($this->isColumnModified(sfGuardUserPeer::CP)) $criteria->add(sfGuardUserPeer::CP, $this->cp);
		if ($this->isColumnModified(sfGuardUserPeer::DESCRIPTION)) $criteria->add(sfGuardUserPeer::DESCRIPTION, $this->description);
		if ($this->isColumnModified(sfGuardUserPeer::CONTACT)) $criteria->add(sfGuardUserPeer::CONTACT, $this->contact);
		if ($this->isColumnModified(sfGuardUserPeer::CREATED_AT)) $criteria->add(sfGuardUserPeer::CREATED_AT, $this->created_at);
		if ($this->isColumnModified(sfGuardUserPeer::LAST_LOGIN)) $criteria->add(sfGuardUserPeer::LAST_LOGIN, $this->last_login);
		if ($this->isColumnModified(sfGuardUserPeer::IS_ACTIVE)) $criteria->add(sfGuardUserPeer::IS_ACTIVE, $this->is_active);
		if ($this->isColumnModified(sfGuardUserPeer::IS_SUPER_ADMIN)) $criteria->add(sfGuardUserPeer::IS_SUPER_ADMIN, $this->is_super_admin);

		return $criteria;
	}

	/**
	 * Builds a Criteria object containing the primary key for this object.
	 *
	 * Unlike buildCriteria() this method includes the primary key values regardless
	 * of whether or not they have been modified.
	 *
	 * @return     Criteria The Criteria object containing value(s) for primary key(s).
	 */
	public function buildPkeyCriteria()
	{
		$criteria = new Criteria(sfGuardUserPeer::DATABASE_NAME);

		$criteria->add(sfGuardUserPeer::ID, $this->id);

		return $criteria;
	}

	/**
	 * Returns the primary key for this object (row).
	 * @return     int
	 */
	public function getPrimaryKey()
	{
		return $this->getId();
	}

	/**
	 * Generic method to set the primary key (id column).
	 *
	 * @param      int $key Primary key.
	 * @return     void
	 */
	public function setPrimaryKey($key)
	{
		$this->setId($key);
	}

	/**
	 * Sets contents of passed object to values from current object.
	 *
	 * If desired, this method can also make copies of all associated (fkey referrers)
	 * objects.
	 *
	 * @param      object $copyObj An object of sfGuardUser (or compatible) type.
	 * @param      boolean $deepCopy Whether to also copy all rows that refer (by fkey) to the current row.
	 * @throws     PropelException
	 */
	public function copyInto($copyObj, $deepCopy = false)
	{

		$copyObj->setFirstName($this->first_name);

		$copyObj->setLastName($this->last_name);

		$copyObj->setEmailAddress($this->email_address);

		$copyObj->setUsername($this->username);

		$copyObj->setAlgorithm($this->algorithm);

		$copyObj->setSalt($this->salt);

		$copyObj->setPassword($this->password);

		$copyObj->setSex($this->sex);

		$copyObj->setBirthday($this->birthday);

		$copyObj->setAboutme($this->aboutme);

		$copyObj->setProfession($this->profession);

		$copyObj->setMusic($this->music);

		$copyObj->setBooks($this->books);

		$copyObj->setFilms($this->films);

		$copyObj->setTelevision($this->television);

		$copyObj->setGames($this->games);

		$copyObj->setMaritalStatus($this->marital_status);

		$copyObj->setMeetingSex($this->meeting_sex);

		$copyObj->setHometown($this->hometown);

		$copyObj->setBorntown($this->borntown);

		$copyObj->setSmoker($this->smoker);

		$copyObj->setDrinker($this->drinker);

		$copyObj->setEducation($this->education);

		$copyObj->setLanguage($this->language);

		$copyObj->setReligion($this->religion);

		$copyObj->setPolitic($this->politic);

		$copyObj->setCountry($this->country);

		$copyObj->setCity($this->city);

		$copyObj->setCp($this->cp);

		$copyObj->setDescription($this->description);

		$copyObj->setContact($this->contact);

		$copyObj->setCreatedAt($this->created_at);

		$copyObj->setLastLogin($this->last_login);

		$copyObj->setIsActive($this->is_active);

		$copyObj->setIsSuperAdmin($this->is_super_admin);


		if ($deepCopy) {
			// important: temporarily setNew(false) because this affects the behavior of
			// the getter/setter methods for fkey referrer objects.
			$copyObj->setNew(false);

			foreach ($this->getinboxsRelatedByUserId() as $relObj) {
				if ($relObj !== $this) {  // ensure that we don't try to copy a reference to ourselves
					$copyObj->addinboxRelatedByUserId($relObj->copy($deepCopy));
				}
			}

			foreach ($this->getinboxsRelatedByDestUserId() as $relObj) {
				if ($relObj !== $this) {  // ensure that we don't try to copy a reference to ourselves
					$copyObj->addinboxRelatedByDestUserId($relObj->copy($deepCopy));
				}
			}

			foreach ($this->getsfGuardUserPermissions() as $relObj) {
				if ($relObj !== $this) {  // ensure that we don't try to copy a reference to ourselves
					$copyObj->addsfGuardUserPermission($relObj->copy($deepCopy));
				}
			}

			foreach ($this->getsfGuardUserGroups() as $relObj) {
				if ($relObj !== $this) {  // ensure that we don't try to copy a reference to ourselves
					$copyObj->addsfGuardUserGroup($relObj->copy($deepCopy));
				}
			}

			foreach ($this->getsfGuardRememberKeys() as $relObj) {
				if ($relObj !== $this) {  // ensure that we don't try to copy a reference to ourselves
					$copyObj->addsfGuardRememberKey($relObj->copy($deepCopy));
				}
			}

			$relObj = $this->getSfguardforgotpassword();
			if ($relObj) {
				$copyObj->setSfguardforgotpassword($relObj->copy($deepCopy));
			}

			foreach ($this->getLocations() as $relObj) {
				if ($relObj !== $this) {  // ensure that we don't try to copy a reference to ourselves
					$copyObj->addLocation($relObj->copy($deepCopy));
				}
			}

			foreach ($this->getFavlikesRelatedByUserId() as $relObj) {
				if ($relObj !== $this) {  // ensure that we don't try to copy a reference to ourselves
					$copyObj->addFavlikeRelatedByUserId($relObj->copy($deepCopy));
				}
			}

			foreach ($this->getFavlikesRelatedByDestUserId() as $relObj) {
				if ($relObj !== $this) {  // ensure that we don't try to copy a reference to ourselves
					$copyObj->addFavlikeRelatedByDestUserId($relObj->copy($deepCopy));
				}
			}

			foreach ($this->getCommentsRelatedByUserId() as $relObj) {
				if ($relObj !== $this) {  // ensure that we don't try to copy a reference to ourselves
					$copyObj->addCommentRelatedByUserId($relObj->copy($deepCopy));
				}
			}

			foreach ($this->getCommentsRelatedByDestUserId() as $relObj) {
				if ($relObj !== $this) {  // ensure that we don't try to copy a reference to ourselves
					$copyObj->addCommentRelatedByDestUserId($relObj->copy($deepCopy));
				}
			}

			foreach ($this->getPubssRelatedByUserId() as $relObj) {
				if ($relObj !== $this) {  // ensure that we don't try to copy a reference to ourselves
					$copyObj->addPubsRelatedByUserId($relObj->copy($deepCopy));
				}
			}

			foreach ($this->getPubssRelatedByDestUserId() as $relObj) {
				if ($relObj !== $this) {  // ensure that we don't try to copy a reference to ourselves
					$copyObj->addPubsRelatedByDestUserId($relObj->copy($deepCopy));
				}
			}

			foreach ($this->getAudiosRelatedByUserId() as $relObj) {
				if ($relObj !== $this) {  // ensure that we don't try to copy a reference to ourselves
					$copyObj->addAudioRelatedByUserId($relObj->copy($deepCopy));
				}
			}

			foreach ($this->getAudiosRelatedByDestUserId() as $relObj) {
				if ($relObj !== $this) {  // ensure that we don't try to copy a reference to ourselves
					$copyObj->addAudioRelatedByDestUserId($relObj->copy($deepCopy));
				}
			}

			foreach ($this->getPlaylists() as $relObj) {
				if ($relObj !== $this) {  // ensure that we don't try to copy a reference to ourselves
					$copyObj->addPlaylist($relObj->copy($deepCopy));
				}
			}

			foreach ($this->getTexts() as $relObj) {
				if ($relObj !== $this) {  // ensure that we don't try to copy a reference to ourselves
					$copyObj->addText($relObj->copy($deepCopy));
				}
			}

			foreach ($this->getLinks() as $relObj) {
				if ($relObj !== $this) {  // ensure that we don't try to copy a reference to ourselves
					$copyObj->addLink($relObj->copy($deepCopy));
				}
			}

			foreach ($this->getFollowsRelatedByUserId() as $relObj) {
				if ($relObj !== $this) {  // ensure that we don't try to copy a reference to ourselves
					$copyObj->addFollowRelatedByUserId($relObj->copy($deepCopy));
				}
			}

			foreach ($this->getFollowsRelatedByFollowId() as $relObj) {
				if ($relObj !== $this) {  // ensure that we don't try to copy a reference to ourselves
					$copyObj->addFollowRelatedByFollowId($relObj->copy($deepCopy));
				}
			}

			foreach ($this->getNotificationsRelatedByUserId() as $relObj) {
				if ($relObj !== $this) {  // ensure that we don't try to copy a reference to ourselves
					$copyObj->addNotificationRelatedByUserId($relObj->copy($deepCopy));
				}
			}

			foreach ($this->getNotificationsRelatedByDestUserId() as $relObj) {
				if ($relObj !== $this) {  // ensure that we don't try to copy a reference to ourselves
					$copyObj->addNotificationRelatedByDestUserId($relObj->copy($deepCopy));
				}
			}

			foreach ($this->getSettingHasUsers() as $relObj) {
				if ($relObj !== $this) {  // ensure that we don't try to copy a reference to ourselves
					$copyObj->addSettingHasUser($relObj->copy($deepCopy));
				}
			}

			foreach ($this->getEvents() as $relObj) {
				if ($relObj !== $this) {  // ensure that we don't try to copy a reference to ourselves
					$copyObj->addEvent($relObj->copy($deepCopy));
				}
			}

			foreach ($this->getAlbumPhotos() as $relObj) {
				if ($relObj !== $this) {  // ensure that we don't try to copy a reference to ourselves
					$copyObj->addAlbumPhoto($relObj->copy($deepCopy));
				}
			}

			foreach ($this->getProfilePhotos() as $relObj) {
				if ($relObj !== $this) {  // ensure that we don't try to copy a reference to ourselves
					$copyObj->addProfilePhoto($relObj->copy($deepCopy));
				}
			}

		} // if ($deepCopy)


		$copyObj->setNew(true);

		$copyObj->setId(NULL); // this is a auto-increment column, so set to default value

	}

	/**
	 * Makes a copy of this object that will be inserted as a new row in table when saved.
	 * It creates a new object filling in the simple attributes, but skipping any primary
	 * keys that are defined for the table.
	 *
	 * If desired, this method can also make copies of all associated (fkey referrers)
	 * objects.
	 *
	 * @param      boolean $deepCopy Whether to also copy all rows that refer (by fkey) to the current row.
	 * @return     sfGuardUser Clone of current object.
	 * @throws     PropelException
	 */
	public function copy($deepCopy = false)
	{
		// we use get_class(), because this might be a subclass
		$clazz = get_class($this);
		$copyObj = new $clazz();
		$this->copyInto($copyObj, $deepCopy);
		return $copyObj;
	}

	/**
	 * Returns a peer instance associated with this om.
	 *
	 * Since Peer classes are not to have any instance attributes, this method returns the
	 * same instance for all member of this class. The method could therefore
	 * be static, but this would prevent one from overriding the behavior.
	 *
	 * @return     sfGuardUserPeer
	 */
	public function getPeer()
	{
		if (self::$peer === null) {
			self::$peer = new sfGuardUserPeer();
		}
		return self::$peer;
	}

	/**
	 * Clears out the collinboxsRelatedByUserId collection (array).
	 *
	 * This does not modify the database; however, it will remove any associated objects, causing
	 * them to be refetched by subsequent calls to accessor method.
	 *
	 * @return     void
	 * @see        addinboxsRelatedByUserId()
	 */
	public function clearinboxsRelatedByUserId()
	{
		$this->collinboxsRelatedByUserId = null; // important to set this to NULL since that means it is uninitialized
	}

	/**
	 * Initializes the collinboxsRelatedByUserId collection (array).
	 *
	 * By default this just sets the collinboxsRelatedByUserId collection to an empty array (like clearcollinboxsRelatedByUserId());
	 * however, you may wish to override this method in your stub class to provide setting appropriate
	 * to your application -- for example, setting the initial array to the values stored in database.
	 *
	 * @return     void
	 */
	public function initinboxsRelatedByUserId()
	{
		$this->collinboxsRelatedByUserId = array();
	}

	/**
	 * Gets an array of inbox objects which contain a foreign key that references this object.
	 *
	 * If this collection has already been initialized with an identical Criteria, it returns the collection.
	 * Otherwise if this sfGuardUser has previously been saved, it will retrieve
	 * related inboxsRelatedByUserId from storage. If this sfGuardUser is new, it will return
	 * an empty collection or the current collection, the criteria is ignored on a new object.
	 *
	 * @param      PropelPDO $con
	 * @param      Criteria $criteria
	 * @return     array inbox[]
	 * @throws     PropelException
	 */
	public function getinboxsRelatedByUserId($criteria = null, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(sfGuardUserPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collinboxsRelatedByUserId === null) {
			if ($this->isNew()) {
			   $this->collinboxsRelatedByUserId = array();
			} else {

				$criteria->add(inboxPeer::USER_ID, $this->id);

				inboxPeer::addSelectColumns($criteria);
				$this->collinboxsRelatedByUserId = inboxPeer::doSelect($criteria, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return the collection.


				$criteria->add(inboxPeer::USER_ID, $this->id);

				inboxPeer::addSelectColumns($criteria);
				if (!isset($this->lastinboxRelatedByUserIdCriteria) || !$this->lastinboxRelatedByUserIdCriteria->equals($criteria)) {
					$this->collinboxsRelatedByUserId = inboxPeer::doSelect($criteria, $con);
				}
			}
		}
		$this->lastinboxRelatedByUserIdCriteria = $criteria;
		return $this->collinboxsRelatedByUserId;
	}

	/**
	 * Returns the number of related inbox objects.
	 *
	 * @param      Criteria $criteria
	 * @param      boolean $distinct
	 * @param      PropelPDO $con
	 * @return     int Count of related inbox objects.
	 * @throws     PropelException
	 */
	public function countinboxsRelatedByUserId(Criteria $criteria = null, $distinct = false, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(sfGuardUserPeer::DATABASE_NAME);
		} else {
			$criteria = clone $criteria;
		}

		if ($distinct) {
			$criteria->setDistinct();
		}

		$count = null;

		if ($this->collinboxsRelatedByUserId === null) {
			if ($this->isNew()) {
				$count = 0;
			} else {

				$criteria->add(inboxPeer::USER_ID, $this->id);

				$count = inboxPeer::doCount($criteria, false, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return count of the collection.


				$criteria->add(inboxPeer::USER_ID, $this->id);

				if (!isset($this->lastinboxRelatedByUserIdCriteria) || !$this->lastinboxRelatedByUserIdCriteria->equals($criteria)) {
					$count = inboxPeer::doCount($criteria, false, $con);
				} else {
					$count = count($this->collinboxsRelatedByUserId);
				}
			} else {
				$count = count($this->collinboxsRelatedByUserId);
			}
		}
		return $count;
	}

	/**
	 * Method called to associate a inbox object to this object
	 * through the inbox foreign key attribute.
	 *
	 * @param      inbox $l inbox
	 * @return     void
	 * @throws     PropelException
	 */
	public function addinboxRelatedByUserId(inbox $l)
	{
		if ($this->collinboxsRelatedByUserId === null) {
			$this->initinboxsRelatedByUserId();
		}
		if (!in_array($l, $this->collinboxsRelatedByUserId, true)) { // only add it if the **same** object is not already associated
			array_push($this->collinboxsRelatedByUserId, $l);
			$l->setsfGuardUserRelatedByUserId($this);
		}
	}

	/**
	 * Clears out the collinboxsRelatedByDestUserId collection (array).
	 *
	 * This does not modify the database; however, it will remove any associated objects, causing
	 * them to be refetched by subsequent calls to accessor method.
	 *
	 * @return     void
	 * @see        addinboxsRelatedByDestUserId()
	 */
	public function clearinboxsRelatedByDestUserId()
	{
		$this->collinboxsRelatedByDestUserId = null; // important to set this to NULL since that means it is uninitialized
	}

	/**
	 * Initializes the collinboxsRelatedByDestUserId collection (array).
	 *
	 * By default this just sets the collinboxsRelatedByDestUserId collection to an empty array (like clearcollinboxsRelatedByDestUserId());
	 * however, you may wish to override this method in your stub class to provide setting appropriate
	 * to your application -- for example, setting the initial array to the values stored in database.
	 *
	 * @return     void
	 */
	public function initinboxsRelatedByDestUserId()
	{
		$this->collinboxsRelatedByDestUserId = array();
	}

	/**
	 * Gets an array of inbox objects which contain a foreign key that references this object.
	 *
	 * If this collection has already been initialized with an identical Criteria, it returns the collection.
	 * Otherwise if this sfGuardUser has previously been saved, it will retrieve
	 * related inboxsRelatedByDestUserId from storage. If this sfGuardUser is new, it will return
	 * an empty collection or the current collection, the criteria is ignored on a new object.
	 *
	 * @param      PropelPDO $con
	 * @param      Criteria $criteria
	 * @return     array inbox[]
	 * @throws     PropelException
	 */
	public function getinboxsRelatedByDestUserId($criteria = null, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(sfGuardUserPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collinboxsRelatedByDestUserId === null) {
			if ($this->isNew()) {
			   $this->collinboxsRelatedByDestUserId = array();
			} else {

				$criteria->add(inboxPeer::DEST_USER_ID, $this->id);

				inboxPeer::addSelectColumns($criteria);
				$this->collinboxsRelatedByDestUserId = inboxPeer::doSelect($criteria, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return the collection.


				$criteria->add(inboxPeer::DEST_USER_ID, $this->id);

				inboxPeer::addSelectColumns($criteria);
				if (!isset($this->lastinboxRelatedByDestUserIdCriteria) || !$this->lastinboxRelatedByDestUserIdCriteria->equals($criteria)) {
					$this->collinboxsRelatedByDestUserId = inboxPeer::doSelect($criteria, $con);
				}
			}
		}
		$this->lastinboxRelatedByDestUserIdCriteria = $criteria;
		return $this->collinboxsRelatedByDestUserId;
	}

	/**
	 * Returns the number of related inbox objects.
	 *
	 * @param      Criteria $criteria
	 * @param      boolean $distinct
	 * @param      PropelPDO $con
	 * @return     int Count of related inbox objects.
	 * @throws     PropelException
	 */
	public function countinboxsRelatedByDestUserId(Criteria $criteria = null, $distinct = false, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(sfGuardUserPeer::DATABASE_NAME);
		} else {
			$criteria = clone $criteria;
		}

		if ($distinct) {
			$criteria->setDistinct();
		}

		$count = null;

		if ($this->collinboxsRelatedByDestUserId === null) {
			if ($this->isNew()) {
				$count = 0;
			} else {

				$criteria->add(inboxPeer::DEST_USER_ID, $this->id);

				$count = inboxPeer::doCount($criteria, false, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return count of the collection.


				$criteria->add(inboxPeer::DEST_USER_ID, $this->id);

				if (!isset($this->lastinboxRelatedByDestUserIdCriteria) || !$this->lastinboxRelatedByDestUserIdCriteria->equals($criteria)) {
					$count = inboxPeer::doCount($criteria, false, $con);
				} else {
					$count = count($this->collinboxsRelatedByDestUserId);
				}
			} else {
				$count = count($this->collinboxsRelatedByDestUserId);
			}
		}
		return $count;
	}

	/**
	 * Method called to associate a inbox object to this object
	 * through the inbox foreign key attribute.
	 *
	 * @param      inbox $l inbox
	 * @return     void
	 * @throws     PropelException
	 */
	public function addinboxRelatedByDestUserId(inbox $l)
	{
		if ($this->collinboxsRelatedByDestUserId === null) {
			$this->initinboxsRelatedByDestUserId();
		}
		if (!in_array($l, $this->collinboxsRelatedByDestUserId, true)) { // only add it if the **same** object is not already associated
			array_push($this->collinboxsRelatedByDestUserId, $l);
			$l->setsfGuardUserRelatedByDestUserId($this);
		}
	}

	/**
	 * Clears out the collsfGuardUserPermissions collection (array).
	 *
	 * This does not modify the database; however, it will remove any associated objects, causing
	 * them to be refetched by subsequent calls to accessor method.
	 *
	 * @return     void
	 * @see        addsfGuardUserPermissions()
	 */
	public function clearsfGuardUserPermissions()
	{
		$this->collsfGuardUserPermissions = null; // important to set this to NULL since that means it is uninitialized
	}

	/**
	 * Initializes the collsfGuardUserPermissions collection (array).
	 *
	 * By default this just sets the collsfGuardUserPermissions collection to an empty array (like clearcollsfGuardUserPermissions());
	 * however, you may wish to override this method in your stub class to provide setting appropriate
	 * to your application -- for example, setting the initial array to the values stored in database.
	 *
	 * @return     void
	 */
	public function initsfGuardUserPermissions()
	{
		$this->collsfGuardUserPermissions = array();
	}

	/**
	 * Gets an array of sfGuardUserPermission objects which contain a foreign key that references this object.
	 *
	 * If this collection has already been initialized with an identical Criteria, it returns the collection.
	 * Otherwise if this sfGuardUser has previously been saved, it will retrieve
	 * related sfGuardUserPermissions from storage. If this sfGuardUser is new, it will return
	 * an empty collection or the current collection, the criteria is ignored on a new object.
	 *
	 * @param      PropelPDO $con
	 * @param      Criteria $criteria
	 * @return     array sfGuardUserPermission[]
	 * @throws     PropelException
	 */
	public function getsfGuardUserPermissions($criteria = null, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(sfGuardUserPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collsfGuardUserPermissions === null) {
			if ($this->isNew()) {
			   $this->collsfGuardUserPermissions = array();
			} else {

				$criteria->add(sfGuardUserPermissionPeer::USER_ID, $this->id);

				sfGuardUserPermissionPeer::addSelectColumns($criteria);
				$this->collsfGuardUserPermissions = sfGuardUserPermissionPeer::doSelect($criteria, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return the collection.


				$criteria->add(sfGuardUserPermissionPeer::USER_ID, $this->id);

				sfGuardUserPermissionPeer::addSelectColumns($criteria);
				if (!isset($this->lastsfGuardUserPermissionCriteria) || !$this->lastsfGuardUserPermissionCriteria->equals($criteria)) {
					$this->collsfGuardUserPermissions = sfGuardUserPermissionPeer::doSelect($criteria, $con);
				}
			}
		}
		$this->lastsfGuardUserPermissionCriteria = $criteria;
		return $this->collsfGuardUserPermissions;
	}

	/**
	 * Returns the number of related sfGuardUserPermission objects.
	 *
	 * @param      Criteria $criteria
	 * @param      boolean $distinct
	 * @param      PropelPDO $con
	 * @return     int Count of related sfGuardUserPermission objects.
	 * @throws     PropelException
	 */
	public function countsfGuardUserPermissions(Criteria $criteria = null, $distinct = false, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(sfGuardUserPeer::DATABASE_NAME);
		} else {
			$criteria = clone $criteria;
		}

		if ($distinct) {
			$criteria->setDistinct();
		}

		$count = null;

		if ($this->collsfGuardUserPermissions === null) {
			if ($this->isNew()) {
				$count = 0;
			} else {

				$criteria->add(sfGuardUserPermissionPeer::USER_ID, $this->id);

				$count = sfGuardUserPermissionPeer::doCount($criteria, false, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return count of the collection.


				$criteria->add(sfGuardUserPermissionPeer::USER_ID, $this->id);

				if (!isset($this->lastsfGuardUserPermissionCriteria) || !$this->lastsfGuardUserPermissionCriteria->equals($criteria)) {
					$count = sfGuardUserPermissionPeer::doCount($criteria, false, $con);
				} else {
					$count = count($this->collsfGuardUserPermissions);
				}
			} else {
				$count = count($this->collsfGuardUserPermissions);
			}
		}
		return $count;
	}

	/**
	 * Method called to associate a sfGuardUserPermission object to this object
	 * through the sfGuardUserPermission foreign key attribute.
	 *
	 * @param      sfGuardUserPermission $l sfGuardUserPermission
	 * @return     void
	 * @throws     PropelException
	 */
	public function addsfGuardUserPermission(sfGuardUserPermission $l)
	{
		if ($this->collsfGuardUserPermissions === null) {
			$this->initsfGuardUserPermissions();
		}
		if (!in_array($l, $this->collsfGuardUserPermissions, true)) { // only add it if the **same** object is not already associated
			array_push($this->collsfGuardUserPermissions, $l);
			$l->setsfGuardUser($this);
		}
	}


	/**
	 * If this collection has already been initialized with
	 * an identical criteria, it returns the collection.
	 * Otherwise if this sfGuardUser is new, it will return
	 * an empty collection; or if this sfGuardUser has previously
	 * been saved, it will retrieve related sfGuardUserPermissions from storage.
	 *
	 * This method is protected by default in order to keep the public
	 * api reasonable.  You can provide public methods for those you
	 * actually need in sfGuardUser.
	 */
	public function getsfGuardUserPermissionsJoinsfGuardPermission($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		if ($criteria === null) {
			$criteria = new Criteria(sfGuardUserPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collsfGuardUserPermissions === null) {
			if ($this->isNew()) {
				$this->collsfGuardUserPermissions = array();
			} else {

				$criteria->add(sfGuardUserPermissionPeer::USER_ID, $this->id);

				$this->collsfGuardUserPermissions = sfGuardUserPermissionPeer::doSelectJoinsfGuardPermission($criteria, $con, $join_behavior);
			}
		} else {
			// the following code is to determine if a new query is
			// called for.  If the criteria is the same as the last
			// one, just return the collection.

			$criteria->add(sfGuardUserPermissionPeer::USER_ID, $this->id);

			if (!isset($this->lastsfGuardUserPermissionCriteria) || !$this->lastsfGuardUserPermissionCriteria->equals($criteria)) {
				$this->collsfGuardUserPermissions = sfGuardUserPermissionPeer::doSelectJoinsfGuardPermission($criteria, $con, $join_behavior);
			}
		}
		$this->lastsfGuardUserPermissionCriteria = $criteria;

		return $this->collsfGuardUserPermissions;
	}

	/**
	 * Clears out the collsfGuardUserGroups collection (array).
	 *
	 * This does not modify the database; however, it will remove any associated objects, causing
	 * them to be refetched by subsequent calls to accessor method.
	 *
	 * @return     void
	 * @see        addsfGuardUserGroups()
	 */
	public function clearsfGuardUserGroups()
	{
		$this->collsfGuardUserGroups = null; // important to set this to NULL since that means it is uninitialized
	}

	/**
	 * Initializes the collsfGuardUserGroups collection (array).
	 *
	 * By default this just sets the collsfGuardUserGroups collection to an empty array (like clearcollsfGuardUserGroups());
	 * however, you may wish to override this method in your stub class to provide setting appropriate
	 * to your application -- for example, setting the initial array to the values stored in database.
	 *
	 * @return     void
	 */
	public function initsfGuardUserGroups()
	{
		$this->collsfGuardUserGroups = array();
	}

	/**
	 * Gets an array of sfGuardUserGroup objects which contain a foreign key that references this object.
	 *
	 * If this collection has already been initialized with an identical Criteria, it returns the collection.
	 * Otherwise if this sfGuardUser has previously been saved, it will retrieve
	 * related sfGuardUserGroups from storage. If this sfGuardUser is new, it will return
	 * an empty collection or the current collection, the criteria is ignored on a new object.
	 *
	 * @param      PropelPDO $con
	 * @param      Criteria $criteria
	 * @return     array sfGuardUserGroup[]
	 * @throws     PropelException
	 */
	public function getsfGuardUserGroups($criteria = null, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(sfGuardUserPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collsfGuardUserGroups === null) {
			if ($this->isNew()) {
			   $this->collsfGuardUserGroups = array();
			} else {

				$criteria->add(sfGuardUserGroupPeer::USER_ID, $this->id);

				sfGuardUserGroupPeer::addSelectColumns($criteria);
				$this->collsfGuardUserGroups = sfGuardUserGroupPeer::doSelect($criteria, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return the collection.


				$criteria->add(sfGuardUserGroupPeer::USER_ID, $this->id);

				sfGuardUserGroupPeer::addSelectColumns($criteria);
				if (!isset($this->lastsfGuardUserGroupCriteria) || !$this->lastsfGuardUserGroupCriteria->equals($criteria)) {
					$this->collsfGuardUserGroups = sfGuardUserGroupPeer::doSelect($criteria, $con);
				}
			}
		}
		$this->lastsfGuardUserGroupCriteria = $criteria;
		return $this->collsfGuardUserGroups;
	}

	/**
	 * Returns the number of related sfGuardUserGroup objects.
	 *
	 * @param      Criteria $criteria
	 * @param      boolean $distinct
	 * @param      PropelPDO $con
	 * @return     int Count of related sfGuardUserGroup objects.
	 * @throws     PropelException
	 */
	public function countsfGuardUserGroups(Criteria $criteria = null, $distinct = false, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(sfGuardUserPeer::DATABASE_NAME);
		} else {
			$criteria = clone $criteria;
		}

		if ($distinct) {
			$criteria->setDistinct();
		}

		$count = null;

		if ($this->collsfGuardUserGroups === null) {
			if ($this->isNew()) {
				$count = 0;
			} else {

				$criteria->add(sfGuardUserGroupPeer::USER_ID, $this->id);

				$count = sfGuardUserGroupPeer::doCount($criteria, false, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return count of the collection.


				$criteria->add(sfGuardUserGroupPeer::USER_ID, $this->id);

				if (!isset($this->lastsfGuardUserGroupCriteria) || !$this->lastsfGuardUserGroupCriteria->equals($criteria)) {
					$count = sfGuardUserGroupPeer::doCount($criteria, false, $con);
				} else {
					$count = count($this->collsfGuardUserGroups);
				}
			} else {
				$count = count($this->collsfGuardUserGroups);
			}
		}
		return $count;
	}

	/**
	 * Method called to associate a sfGuardUserGroup object to this object
	 * through the sfGuardUserGroup foreign key attribute.
	 *
	 * @param      sfGuardUserGroup $l sfGuardUserGroup
	 * @return     void
	 * @throws     PropelException
	 */
	public function addsfGuardUserGroup(sfGuardUserGroup $l)
	{
		if ($this->collsfGuardUserGroups === null) {
			$this->initsfGuardUserGroups();
		}
		if (!in_array($l, $this->collsfGuardUserGroups, true)) { // only add it if the **same** object is not already associated
			array_push($this->collsfGuardUserGroups, $l);
			$l->setsfGuardUser($this);
		}
	}


	/**
	 * If this collection has already been initialized with
	 * an identical criteria, it returns the collection.
	 * Otherwise if this sfGuardUser is new, it will return
	 * an empty collection; or if this sfGuardUser has previously
	 * been saved, it will retrieve related sfGuardUserGroups from storage.
	 *
	 * This method is protected by default in order to keep the public
	 * api reasonable.  You can provide public methods for those you
	 * actually need in sfGuardUser.
	 */
	public function getsfGuardUserGroupsJoinsfGuardGroup($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		if ($criteria === null) {
			$criteria = new Criteria(sfGuardUserPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collsfGuardUserGroups === null) {
			if ($this->isNew()) {
				$this->collsfGuardUserGroups = array();
			} else {

				$criteria->add(sfGuardUserGroupPeer::USER_ID, $this->id);

				$this->collsfGuardUserGroups = sfGuardUserGroupPeer::doSelectJoinsfGuardGroup($criteria, $con, $join_behavior);
			}
		} else {
			// the following code is to determine if a new query is
			// called for.  If the criteria is the same as the last
			// one, just return the collection.

			$criteria->add(sfGuardUserGroupPeer::USER_ID, $this->id);

			if (!isset($this->lastsfGuardUserGroupCriteria) || !$this->lastsfGuardUserGroupCriteria->equals($criteria)) {
				$this->collsfGuardUserGroups = sfGuardUserGroupPeer::doSelectJoinsfGuardGroup($criteria, $con, $join_behavior);
			}
		}
		$this->lastsfGuardUserGroupCriteria = $criteria;

		return $this->collsfGuardUserGroups;
	}

	/**
	 * Clears out the collsfGuardRememberKeys collection (array).
	 *
	 * This does not modify the database; however, it will remove any associated objects, causing
	 * them to be refetched by subsequent calls to accessor method.
	 *
	 * @return     void
	 * @see        addsfGuardRememberKeys()
	 */
	public function clearsfGuardRememberKeys()
	{
		$this->collsfGuardRememberKeys = null; // important to set this to NULL since that means it is uninitialized
	}

	/**
	 * Initializes the collsfGuardRememberKeys collection (array).
	 *
	 * By default this just sets the collsfGuardRememberKeys collection to an empty array (like clearcollsfGuardRememberKeys());
	 * however, you may wish to override this method in your stub class to provide setting appropriate
	 * to your application -- for example, setting the initial array to the values stored in database.
	 *
	 * @return     void
	 */
	public function initsfGuardRememberKeys()
	{
		$this->collsfGuardRememberKeys = array();
	}

	/**
	 * Gets an array of sfGuardRememberKey objects which contain a foreign key that references this object.
	 *
	 * If this collection has already been initialized with an identical Criteria, it returns the collection.
	 * Otherwise if this sfGuardUser has previously been saved, it will retrieve
	 * related sfGuardRememberKeys from storage. If this sfGuardUser is new, it will return
	 * an empty collection or the current collection, the criteria is ignored on a new object.
	 *
	 * @param      PropelPDO $con
	 * @param      Criteria $criteria
	 * @return     array sfGuardRememberKey[]
	 * @throws     PropelException
	 */
	public function getsfGuardRememberKeys($criteria = null, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(sfGuardUserPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collsfGuardRememberKeys === null) {
			if ($this->isNew()) {
			   $this->collsfGuardRememberKeys = array();
			} else {

				$criteria->add(sfGuardRememberKeyPeer::USER_ID, $this->id);

				sfGuardRememberKeyPeer::addSelectColumns($criteria);
				$this->collsfGuardRememberKeys = sfGuardRememberKeyPeer::doSelect($criteria, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return the collection.


				$criteria->add(sfGuardRememberKeyPeer::USER_ID, $this->id);

				sfGuardRememberKeyPeer::addSelectColumns($criteria);
				if (!isset($this->lastsfGuardRememberKeyCriteria) || !$this->lastsfGuardRememberKeyCriteria->equals($criteria)) {
					$this->collsfGuardRememberKeys = sfGuardRememberKeyPeer::doSelect($criteria, $con);
				}
			}
		}
		$this->lastsfGuardRememberKeyCriteria = $criteria;
		return $this->collsfGuardRememberKeys;
	}

	/**
	 * Returns the number of related sfGuardRememberKey objects.
	 *
	 * @param      Criteria $criteria
	 * @param      boolean $distinct
	 * @param      PropelPDO $con
	 * @return     int Count of related sfGuardRememberKey objects.
	 * @throws     PropelException
	 */
	public function countsfGuardRememberKeys(Criteria $criteria = null, $distinct = false, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(sfGuardUserPeer::DATABASE_NAME);
		} else {
			$criteria = clone $criteria;
		}

		if ($distinct) {
			$criteria->setDistinct();
		}

		$count = null;

		if ($this->collsfGuardRememberKeys === null) {
			if ($this->isNew()) {
				$count = 0;
			} else {

				$criteria->add(sfGuardRememberKeyPeer::USER_ID, $this->id);

				$count = sfGuardRememberKeyPeer::doCount($criteria, false, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return count of the collection.


				$criteria->add(sfGuardRememberKeyPeer::USER_ID, $this->id);

				if (!isset($this->lastsfGuardRememberKeyCriteria) || !$this->lastsfGuardRememberKeyCriteria->equals($criteria)) {
					$count = sfGuardRememberKeyPeer::doCount($criteria, false, $con);
				} else {
					$count = count($this->collsfGuardRememberKeys);
				}
			} else {
				$count = count($this->collsfGuardRememberKeys);
			}
		}
		return $count;
	}

	/**
	 * Method called to associate a sfGuardRememberKey object to this object
	 * through the sfGuardRememberKey foreign key attribute.
	 *
	 * @param      sfGuardRememberKey $l sfGuardRememberKey
	 * @return     void
	 * @throws     PropelException
	 */
	public function addsfGuardRememberKey(sfGuardRememberKey $l)
	{
		if ($this->collsfGuardRememberKeys === null) {
			$this->initsfGuardRememberKeys();
		}
		if (!in_array($l, $this->collsfGuardRememberKeys, true)) { // only add it if the **same** object is not already associated
			array_push($this->collsfGuardRememberKeys, $l);
			$l->setsfGuardUser($this);
		}
	}

	/**
	 * Gets a single Sfguardforgotpassword object, which is related to this object by a one-to-one relationship.
	 *
	 * @param      PropelPDO $con
	 * @return     Sfguardforgotpassword
	 * @throws     PropelException
	 */
	public function getSfguardforgotpassword(PropelPDO $con = null)
	{

		if ($this->singleSfguardforgotpassword === null && !$this->isNew()) {
			$this->singleSfguardforgotpassword = SfguardforgotpasswordPeer::retrieveByPK($this->id, $con);
		}

		return $this->singleSfguardforgotpassword;
	}

	/**
	 * Sets a single Sfguardforgotpassword object as related to this object by a one-to-one relationship.
	 *
	 * @param      Sfguardforgotpassword $l Sfguardforgotpassword
	 * @return     sfGuardUser The current object (for fluent API support)
	 * @throws     PropelException
	 */
	public function setSfguardforgotpassword(Sfguardforgotpassword $v)
	{
		$this->singleSfguardforgotpassword = $v;

		// Make sure that that the passed-in Sfguardforgotpassword isn't already associated with this object
		if ($v->getsfGuardUser() === null) {
			$v->setsfGuardUser($this);
		}

		return $this;
	}

	/**
	 * Clears out the collLocations collection (array).
	 *
	 * This does not modify the database; however, it will remove any associated objects, causing
	 * them to be refetched by subsequent calls to accessor method.
	 *
	 * @return     void
	 * @see        addLocations()
	 */
	public function clearLocations()
	{
		$this->collLocations = null; // important to set this to NULL since that means it is uninitialized
	}

	/**
	 * Initializes the collLocations collection (array).
	 *
	 * By default this just sets the collLocations collection to an empty array (like clearcollLocations());
	 * however, you may wish to override this method in your stub class to provide setting appropriate
	 * to your application -- for example, setting the initial array to the values stored in database.
	 *
	 * @return     void
	 */
	public function initLocations()
	{
		$this->collLocations = array();
	}

	/**
	 * Gets an array of Location objects which contain a foreign key that references this object.
	 *
	 * If this collection has already been initialized with an identical Criteria, it returns the collection.
	 * Otherwise if this sfGuardUser has previously been saved, it will retrieve
	 * related Locations from storage. If this sfGuardUser is new, it will return
	 * an empty collection or the current collection, the criteria is ignored on a new object.
	 *
	 * @param      PropelPDO $con
	 * @param      Criteria $criteria
	 * @return     array Location[]
	 * @throws     PropelException
	 */
	public function getLocations($criteria = null, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(sfGuardUserPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collLocations === null) {
			if ($this->isNew()) {
			   $this->collLocations = array();
			} else {

				$criteria->add(LocationPeer::USER_ID, $this->id);

				LocationPeer::addSelectColumns($criteria);
				$this->collLocations = LocationPeer::doSelect($criteria, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return the collection.


				$criteria->add(LocationPeer::USER_ID, $this->id);

				LocationPeer::addSelectColumns($criteria);
				if (!isset($this->lastLocationCriteria) || !$this->lastLocationCriteria->equals($criteria)) {
					$this->collLocations = LocationPeer::doSelect($criteria, $con);
				}
			}
		}
		$this->lastLocationCriteria = $criteria;
		return $this->collLocations;
	}

	/**
	 * Returns the number of related Location objects.
	 *
	 * @param      Criteria $criteria
	 * @param      boolean $distinct
	 * @param      PropelPDO $con
	 * @return     int Count of related Location objects.
	 * @throws     PropelException
	 */
	public function countLocations(Criteria $criteria = null, $distinct = false, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(sfGuardUserPeer::DATABASE_NAME);
		} else {
			$criteria = clone $criteria;
		}

		if ($distinct) {
			$criteria->setDistinct();
		}

		$count = null;

		if ($this->collLocations === null) {
			if ($this->isNew()) {
				$count = 0;
			} else {

				$criteria->add(LocationPeer::USER_ID, $this->id);

				$count = LocationPeer::doCount($criteria, false, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return count of the collection.


				$criteria->add(LocationPeer::USER_ID, $this->id);

				if (!isset($this->lastLocationCriteria) || !$this->lastLocationCriteria->equals($criteria)) {
					$count = LocationPeer::doCount($criteria, false, $con);
				} else {
					$count = count($this->collLocations);
				}
			} else {
				$count = count($this->collLocations);
			}
		}
		return $count;
	}

	/**
	 * Method called to associate a Location object to this object
	 * through the Location foreign key attribute.
	 *
	 * @param      Location $l Location
	 * @return     void
	 * @throws     PropelException
	 */
	public function addLocation(Location $l)
	{
		if ($this->collLocations === null) {
			$this->initLocations();
		}
		if (!in_array($l, $this->collLocations, true)) { // only add it if the **same** object is not already associated
			array_push($this->collLocations, $l);
			$l->setsfGuardUser($this);
		}
	}

	/**
	 * Clears out the collFavlikesRelatedByUserId collection (array).
	 *
	 * This does not modify the database; however, it will remove any associated objects, causing
	 * them to be refetched by subsequent calls to accessor method.
	 *
	 * @return     void
	 * @see        addFavlikesRelatedByUserId()
	 */
	public function clearFavlikesRelatedByUserId()
	{
		$this->collFavlikesRelatedByUserId = null; // important to set this to NULL since that means it is uninitialized
	}

	/**
	 * Initializes the collFavlikesRelatedByUserId collection (array).
	 *
	 * By default this just sets the collFavlikesRelatedByUserId collection to an empty array (like clearcollFavlikesRelatedByUserId());
	 * however, you may wish to override this method in your stub class to provide setting appropriate
	 * to your application -- for example, setting the initial array to the values stored in database.
	 *
	 * @return     void
	 */
	public function initFavlikesRelatedByUserId()
	{
		$this->collFavlikesRelatedByUserId = array();
	}

	/**
	 * Gets an array of Favlike objects which contain a foreign key that references this object.
	 *
	 * If this collection has already been initialized with an identical Criteria, it returns the collection.
	 * Otherwise if this sfGuardUser has previously been saved, it will retrieve
	 * related FavlikesRelatedByUserId from storage. If this sfGuardUser is new, it will return
	 * an empty collection or the current collection, the criteria is ignored on a new object.
	 *
	 * @param      PropelPDO $con
	 * @param      Criteria $criteria
	 * @return     array Favlike[]
	 * @throws     PropelException
	 */
	public function getFavlikesRelatedByUserId($criteria = null, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(sfGuardUserPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collFavlikesRelatedByUserId === null) {
			if ($this->isNew()) {
			   $this->collFavlikesRelatedByUserId = array();
			} else {

				$criteria->add(FavlikePeer::USER_ID, $this->id);

				FavlikePeer::addSelectColumns($criteria);
				$this->collFavlikesRelatedByUserId = FavlikePeer::doSelect($criteria, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return the collection.


				$criteria->add(FavlikePeer::USER_ID, $this->id);

				FavlikePeer::addSelectColumns($criteria);
				if (!isset($this->lastFavlikeRelatedByUserIdCriteria) || !$this->lastFavlikeRelatedByUserIdCriteria->equals($criteria)) {
					$this->collFavlikesRelatedByUserId = FavlikePeer::doSelect($criteria, $con);
				}
			}
		}
		$this->lastFavlikeRelatedByUserIdCriteria = $criteria;
		return $this->collFavlikesRelatedByUserId;
	}

	/**
	 * Returns the number of related Favlike objects.
	 *
	 * @param      Criteria $criteria
	 * @param      boolean $distinct
	 * @param      PropelPDO $con
	 * @return     int Count of related Favlike objects.
	 * @throws     PropelException
	 */
	public function countFavlikesRelatedByUserId(Criteria $criteria = null, $distinct = false, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(sfGuardUserPeer::DATABASE_NAME);
		} else {
			$criteria = clone $criteria;
		}

		if ($distinct) {
			$criteria->setDistinct();
		}

		$count = null;

		if ($this->collFavlikesRelatedByUserId === null) {
			if ($this->isNew()) {
				$count = 0;
			} else {

				$criteria->add(FavlikePeer::USER_ID, $this->id);

				$count = FavlikePeer::doCount($criteria, false, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return count of the collection.


				$criteria->add(FavlikePeer::USER_ID, $this->id);

				if (!isset($this->lastFavlikeRelatedByUserIdCriteria) || !$this->lastFavlikeRelatedByUserIdCriteria->equals($criteria)) {
					$count = FavlikePeer::doCount($criteria, false, $con);
				} else {
					$count = count($this->collFavlikesRelatedByUserId);
				}
			} else {
				$count = count($this->collFavlikesRelatedByUserId);
			}
		}
		return $count;
	}

	/**
	 * Method called to associate a Favlike object to this object
	 * through the Favlike foreign key attribute.
	 *
	 * @param      Favlike $l Favlike
	 * @return     void
	 * @throws     PropelException
	 */
	public function addFavlikeRelatedByUserId(Favlike $l)
	{
		if ($this->collFavlikesRelatedByUserId === null) {
			$this->initFavlikesRelatedByUserId();
		}
		if (!in_array($l, $this->collFavlikesRelatedByUserId, true)) { // only add it if the **same** object is not already associated
			array_push($this->collFavlikesRelatedByUserId, $l);
			$l->setsfGuardUserRelatedByUserId($this);
		}
	}

	/**
	 * Clears out the collFavlikesRelatedByDestUserId collection (array).
	 *
	 * This does not modify the database; however, it will remove any associated objects, causing
	 * them to be refetched by subsequent calls to accessor method.
	 *
	 * @return     void
	 * @see        addFavlikesRelatedByDestUserId()
	 */
	public function clearFavlikesRelatedByDestUserId()
	{
		$this->collFavlikesRelatedByDestUserId = null; // important to set this to NULL since that means it is uninitialized
	}

	/**
	 * Initializes the collFavlikesRelatedByDestUserId collection (array).
	 *
	 * By default this just sets the collFavlikesRelatedByDestUserId collection to an empty array (like clearcollFavlikesRelatedByDestUserId());
	 * however, you may wish to override this method in your stub class to provide setting appropriate
	 * to your application -- for example, setting the initial array to the values stored in database.
	 *
	 * @return     void
	 */
	public function initFavlikesRelatedByDestUserId()
	{
		$this->collFavlikesRelatedByDestUserId = array();
	}

	/**
	 * Gets an array of Favlike objects which contain a foreign key that references this object.
	 *
	 * If this collection has already been initialized with an identical Criteria, it returns the collection.
	 * Otherwise if this sfGuardUser has previously been saved, it will retrieve
	 * related FavlikesRelatedByDestUserId from storage. If this sfGuardUser is new, it will return
	 * an empty collection or the current collection, the criteria is ignored on a new object.
	 *
	 * @param      PropelPDO $con
	 * @param      Criteria $criteria
	 * @return     array Favlike[]
	 * @throws     PropelException
	 */
	public function getFavlikesRelatedByDestUserId($criteria = null, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(sfGuardUserPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collFavlikesRelatedByDestUserId === null) {
			if ($this->isNew()) {
			   $this->collFavlikesRelatedByDestUserId = array();
			} else {

				$criteria->add(FavlikePeer::DEST_USER_ID, $this->id);

				FavlikePeer::addSelectColumns($criteria);
				$this->collFavlikesRelatedByDestUserId = FavlikePeer::doSelect($criteria, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return the collection.


				$criteria->add(FavlikePeer::DEST_USER_ID, $this->id);

				FavlikePeer::addSelectColumns($criteria);
				if (!isset($this->lastFavlikeRelatedByDestUserIdCriteria) || !$this->lastFavlikeRelatedByDestUserIdCriteria->equals($criteria)) {
					$this->collFavlikesRelatedByDestUserId = FavlikePeer::doSelect($criteria, $con);
				}
			}
		}
		$this->lastFavlikeRelatedByDestUserIdCriteria = $criteria;
		return $this->collFavlikesRelatedByDestUserId;
	}

	/**
	 * Returns the number of related Favlike objects.
	 *
	 * @param      Criteria $criteria
	 * @param      boolean $distinct
	 * @param      PropelPDO $con
	 * @return     int Count of related Favlike objects.
	 * @throws     PropelException
	 */
	public function countFavlikesRelatedByDestUserId(Criteria $criteria = null, $distinct = false, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(sfGuardUserPeer::DATABASE_NAME);
		} else {
			$criteria = clone $criteria;
		}

		if ($distinct) {
			$criteria->setDistinct();
		}

		$count = null;

		if ($this->collFavlikesRelatedByDestUserId === null) {
			if ($this->isNew()) {
				$count = 0;
			} else {

				$criteria->add(FavlikePeer::DEST_USER_ID, $this->id);

				$count = FavlikePeer::doCount($criteria, false, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return count of the collection.


				$criteria->add(FavlikePeer::DEST_USER_ID, $this->id);

				if (!isset($this->lastFavlikeRelatedByDestUserIdCriteria) || !$this->lastFavlikeRelatedByDestUserIdCriteria->equals($criteria)) {
					$count = FavlikePeer::doCount($criteria, false, $con);
				} else {
					$count = count($this->collFavlikesRelatedByDestUserId);
				}
			} else {
				$count = count($this->collFavlikesRelatedByDestUserId);
			}
		}
		return $count;
	}

	/**
	 * Method called to associate a Favlike object to this object
	 * through the Favlike foreign key attribute.
	 *
	 * @param      Favlike $l Favlike
	 * @return     void
	 * @throws     PropelException
	 */
	public function addFavlikeRelatedByDestUserId(Favlike $l)
	{
		if ($this->collFavlikesRelatedByDestUserId === null) {
			$this->initFavlikesRelatedByDestUserId();
		}
		if (!in_array($l, $this->collFavlikesRelatedByDestUserId, true)) { // only add it if the **same** object is not already associated
			array_push($this->collFavlikesRelatedByDestUserId, $l);
			$l->setsfGuardUserRelatedByDestUserId($this);
		}
	}

	/**
	 * Clears out the collCommentsRelatedByUserId collection (array).
	 *
	 * This does not modify the database; however, it will remove any associated objects, causing
	 * them to be refetched by subsequent calls to accessor method.
	 *
	 * @return     void
	 * @see        addCommentsRelatedByUserId()
	 */
	public function clearCommentsRelatedByUserId()
	{
		$this->collCommentsRelatedByUserId = null; // important to set this to NULL since that means it is uninitialized
	}

	/**
	 * Initializes the collCommentsRelatedByUserId collection (array).
	 *
	 * By default this just sets the collCommentsRelatedByUserId collection to an empty array (like clearcollCommentsRelatedByUserId());
	 * however, you may wish to override this method in your stub class to provide setting appropriate
	 * to your application -- for example, setting the initial array to the values stored in database.
	 *
	 * @return     void
	 */
	public function initCommentsRelatedByUserId()
	{
		$this->collCommentsRelatedByUserId = array();
	}

	/**
	 * Gets an array of Comment objects which contain a foreign key that references this object.
	 *
	 * If this collection has already been initialized with an identical Criteria, it returns the collection.
	 * Otherwise if this sfGuardUser has previously been saved, it will retrieve
	 * related CommentsRelatedByUserId from storage. If this sfGuardUser is new, it will return
	 * an empty collection or the current collection, the criteria is ignored on a new object.
	 *
	 * @param      PropelPDO $con
	 * @param      Criteria $criteria
	 * @return     array Comment[]
	 * @throws     PropelException
	 */
	public function getCommentsRelatedByUserId($criteria = null, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(sfGuardUserPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collCommentsRelatedByUserId === null) {
			if ($this->isNew()) {
			   $this->collCommentsRelatedByUserId = array();
			} else {

				$criteria->add(CommentPeer::USER_ID, $this->id);

				CommentPeer::addSelectColumns($criteria);
				$this->collCommentsRelatedByUserId = CommentPeer::doSelect($criteria, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return the collection.


				$criteria->add(CommentPeer::USER_ID, $this->id);

				CommentPeer::addSelectColumns($criteria);
				if (!isset($this->lastCommentRelatedByUserIdCriteria) || !$this->lastCommentRelatedByUserIdCriteria->equals($criteria)) {
					$this->collCommentsRelatedByUserId = CommentPeer::doSelect($criteria, $con);
				}
			}
		}
		$this->lastCommentRelatedByUserIdCriteria = $criteria;
		return $this->collCommentsRelatedByUserId;
	}

	/**
	 * Returns the number of related Comment objects.
	 *
	 * @param      Criteria $criteria
	 * @param      boolean $distinct
	 * @param      PropelPDO $con
	 * @return     int Count of related Comment objects.
	 * @throws     PropelException
	 */
	public function countCommentsRelatedByUserId(Criteria $criteria = null, $distinct = false, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(sfGuardUserPeer::DATABASE_NAME);
		} else {
			$criteria = clone $criteria;
		}

		if ($distinct) {
			$criteria->setDistinct();
		}

		$count = null;

		if ($this->collCommentsRelatedByUserId === null) {
			if ($this->isNew()) {
				$count = 0;
			} else {

				$criteria->add(CommentPeer::USER_ID, $this->id);

				$count = CommentPeer::doCount($criteria, false, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return count of the collection.


				$criteria->add(CommentPeer::USER_ID, $this->id);

				if (!isset($this->lastCommentRelatedByUserIdCriteria) || !$this->lastCommentRelatedByUserIdCriteria->equals($criteria)) {
					$count = CommentPeer::doCount($criteria, false, $con);
				} else {
					$count = count($this->collCommentsRelatedByUserId);
				}
			} else {
				$count = count($this->collCommentsRelatedByUserId);
			}
		}
		return $count;
	}

	/**
	 * Method called to associate a Comment object to this object
	 * through the Comment foreign key attribute.
	 *
	 * @param      Comment $l Comment
	 * @return     void
	 * @throws     PropelException
	 */
	public function addCommentRelatedByUserId(Comment $l)
	{
		if ($this->collCommentsRelatedByUserId === null) {
			$this->initCommentsRelatedByUserId();
		}
		if (!in_array($l, $this->collCommentsRelatedByUserId, true)) { // only add it if the **same** object is not already associated
			array_push($this->collCommentsRelatedByUserId, $l);
			$l->setsfGuardUserRelatedByUserId($this);
		}
	}

	/**
	 * Clears out the collCommentsRelatedByDestUserId collection (array).
	 *
	 * This does not modify the database; however, it will remove any associated objects, causing
	 * them to be refetched by subsequent calls to accessor method.
	 *
	 * @return     void
	 * @see        addCommentsRelatedByDestUserId()
	 */
	public function clearCommentsRelatedByDestUserId()
	{
		$this->collCommentsRelatedByDestUserId = null; // important to set this to NULL since that means it is uninitialized
	}

	/**
	 * Initializes the collCommentsRelatedByDestUserId collection (array).
	 *
	 * By default this just sets the collCommentsRelatedByDestUserId collection to an empty array (like clearcollCommentsRelatedByDestUserId());
	 * however, you may wish to override this method in your stub class to provide setting appropriate
	 * to your application -- for example, setting the initial array to the values stored in database.
	 *
	 * @return     void
	 */
	public function initCommentsRelatedByDestUserId()
	{
		$this->collCommentsRelatedByDestUserId = array();
	}

	/**
	 * Gets an array of Comment objects which contain a foreign key that references this object.
	 *
	 * If this collection has already been initialized with an identical Criteria, it returns the collection.
	 * Otherwise if this sfGuardUser has previously been saved, it will retrieve
	 * related CommentsRelatedByDestUserId from storage. If this sfGuardUser is new, it will return
	 * an empty collection or the current collection, the criteria is ignored on a new object.
	 *
	 * @param      PropelPDO $con
	 * @param      Criteria $criteria
	 * @return     array Comment[]
	 * @throws     PropelException
	 */
	public function getCommentsRelatedByDestUserId($criteria = null, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(sfGuardUserPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collCommentsRelatedByDestUserId === null) {
			if ($this->isNew()) {
			   $this->collCommentsRelatedByDestUserId = array();
			} else {

				$criteria->add(CommentPeer::DEST_USER_ID, $this->id);

				CommentPeer::addSelectColumns($criteria);
				$this->collCommentsRelatedByDestUserId = CommentPeer::doSelect($criteria, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return the collection.


				$criteria->add(CommentPeer::DEST_USER_ID, $this->id);

				CommentPeer::addSelectColumns($criteria);
				if (!isset($this->lastCommentRelatedByDestUserIdCriteria) || !$this->lastCommentRelatedByDestUserIdCriteria->equals($criteria)) {
					$this->collCommentsRelatedByDestUserId = CommentPeer::doSelect($criteria, $con);
				}
			}
		}
		$this->lastCommentRelatedByDestUserIdCriteria = $criteria;
		return $this->collCommentsRelatedByDestUserId;
	}

	/**
	 * Returns the number of related Comment objects.
	 *
	 * @param      Criteria $criteria
	 * @param      boolean $distinct
	 * @param      PropelPDO $con
	 * @return     int Count of related Comment objects.
	 * @throws     PropelException
	 */
	public function countCommentsRelatedByDestUserId(Criteria $criteria = null, $distinct = false, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(sfGuardUserPeer::DATABASE_NAME);
		} else {
			$criteria = clone $criteria;
		}

		if ($distinct) {
			$criteria->setDistinct();
		}

		$count = null;

		if ($this->collCommentsRelatedByDestUserId === null) {
			if ($this->isNew()) {
				$count = 0;
			} else {

				$criteria->add(CommentPeer::DEST_USER_ID, $this->id);

				$count = CommentPeer::doCount($criteria, false, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return count of the collection.


				$criteria->add(CommentPeer::DEST_USER_ID, $this->id);

				if (!isset($this->lastCommentRelatedByDestUserIdCriteria) || !$this->lastCommentRelatedByDestUserIdCriteria->equals($criteria)) {
					$count = CommentPeer::doCount($criteria, false, $con);
				} else {
					$count = count($this->collCommentsRelatedByDestUserId);
				}
			} else {
				$count = count($this->collCommentsRelatedByDestUserId);
			}
		}
		return $count;
	}

	/**
	 * Method called to associate a Comment object to this object
	 * through the Comment foreign key attribute.
	 *
	 * @param      Comment $l Comment
	 * @return     void
	 * @throws     PropelException
	 */
	public function addCommentRelatedByDestUserId(Comment $l)
	{
		if ($this->collCommentsRelatedByDestUserId === null) {
			$this->initCommentsRelatedByDestUserId();
		}
		if (!in_array($l, $this->collCommentsRelatedByDestUserId, true)) { // only add it if the **same** object is not already associated
			array_push($this->collCommentsRelatedByDestUserId, $l);
			$l->setsfGuardUserRelatedByDestUserId($this);
		}
	}

	/**
	 * Clears out the collPubssRelatedByUserId collection (array).
	 *
	 * This does not modify the database; however, it will remove any associated objects, causing
	 * them to be refetched by subsequent calls to accessor method.
	 *
	 * @return     void
	 * @see        addPubssRelatedByUserId()
	 */
	public function clearPubssRelatedByUserId()
	{
		$this->collPubssRelatedByUserId = null; // important to set this to NULL since that means it is uninitialized
	}

	/**
	 * Initializes the collPubssRelatedByUserId collection (array).
	 *
	 * By default this just sets the collPubssRelatedByUserId collection to an empty array (like clearcollPubssRelatedByUserId());
	 * however, you may wish to override this method in your stub class to provide setting appropriate
	 * to your application -- for example, setting the initial array to the values stored in database.
	 *
	 * @return     void
	 */
	public function initPubssRelatedByUserId()
	{
		$this->collPubssRelatedByUserId = array();
	}

	/**
	 * Gets an array of Pubs objects which contain a foreign key that references this object.
	 *
	 * If this collection has already been initialized with an identical Criteria, it returns the collection.
	 * Otherwise if this sfGuardUser has previously been saved, it will retrieve
	 * related PubssRelatedByUserId from storage. If this sfGuardUser is new, it will return
	 * an empty collection or the current collection, the criteria is ignored on a new object.
	 *
	 * @param      PropelPDO $con
	 * @param      Criteria $criteria
	 * @return     array Pubs[]
	 * @throws     PropelException
	 */
	public function getPubssRelatedByUserId($criteria = null, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(sfGuardUserPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collPubssRelatedByUserId === null) {
			if ($this->isNew()) {
			   $this->collPubssRelatedByUserId = array();
			} else {

				$criteria->add(PubsPeer::USER_ID, $this->id);

				PubsPeer::addSelectColumns($criteria);
				$this->collPubssRelatedByUserId = PubsPeer::doSelect($criteria, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return the collection.


				$criteria->add(PubsPeer::USER_ID, $this->id);

				PubsPeer::addSelectColumns($criteria);
				if (!isset($this->lastPubsRelatedByUserIdCriteria) || !$this->lastPubsRelatedByUserIdCriteria->equals($criteria)) {
					$this->collPubssRelatedByUserId = PubsPeer::doSelect($criteria, $con);
				}
			}
		}
		$this->lastPubsRelatedByUserIdCriteria = $criteria;
		return $this->collPubssRelatedByUserId;
	}

	/**
	 * Returns the number of related Pubs objects.
	 *
	 * @param      Criteria $criteria
	 * @param      boolean $distinct
	 * @param      PropelPDO $con
	 * @return     int Count of related Pubs objects.
	 * @throws     PropelException
	 */
	public function countPubssRelatedByUserId(Criteria $criteria = null, $distinct = false, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(sfGuardUserPeer::DATABASE_NAME);
		} else {
			$criteria = clone $criteria;
		}

		if ($distinct) {
			$criteria->setDistinct();
		}

		$count = null;

		if ($this->collPubssRelatedByUserId === null) {
			if ($this->isNew()) {
				$count = 0;
			} else {

				$criteria->add(PubsPeer::USER_ID, $this->id);

				$count = PubsPeer::doCount($criteria, false, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return count of the collection.


				$criteria->add(PubsPeer::USER_ID, $this->id);

				if (!isset($this->lastPubsRelatedByUserIdCriteria) || !$this->lastPubsRelatedByUserIdCriteria->equals($criteria)) {
					$count = PubsPeer::doCount($criteria, false, $con);
				} else {
					$count = count($this->collPubssRelatedByUserId);
				}
			} else {
				$count = count($this->collPubssRelatedByUserId);
			}
		}
		return $count;
	}

	/**
	 * Method called to associate a Pubs object to this object
	 * through the Pubs foreign key attribute.
	 *
	 * @param      Pubs $l Pubs
	 * @return     void
	 * @throws     PropelException
	 */
	public function addPubsRelatedByUserId(Pubs $l)
	{
		if ($this->collPubssRelatedByUserId === null) {
			$this->initPubssRelatedByUserId();
		}
		if (!in_array($l, $this->collPubssRelatedByUserId, true)) { // only add it if the **same** object is not already associated
			array_push($this->collPubssRelatedByUserId, $l);
			$l->setsfGuardUserRelatedByUserId($this);
		}
	}

	/**
	 * Clears out the collPubssRelatedByDestUserId collection (array).
	 *
	 * This does not modify the database; however, it will remove any associated objects, causing
	 * them to be refetched by subsequent calls to accessor method.
	 *
	 * @return     void
	 * @see        addPubssRelatedByDestUserId()
	 */
	public function clearPubssRelatedByDestUserId()
	{
		$this->collPubssRelatedByDestUserId = null; // important to set this to NULL since that means it is uninitialized
	}

	/**
	 * Initializes the collPubssRelatedByDestUserId collection (array).
	 *
	 * By default this just sets the collPubssRelatedByDestUserId collection to an empty array (like clearcollPubssRelatedByDestUserId());
	 * however, you may wish to override this method in your stub class to provide setting appropriate
	 * to your application -- for example, setting the initial array to the values stored in database.
	 *
	 * @return     void
	 */
	public function initPubssRelatedByDestUserId()
	{
		$this->collPubssRelatedByDestUserId = array();
	}

	/**
	 * Gets an array of Pubs objects which contain a foreign key that references this object.
	 *
	 * If this collection has already been initialized with an identical Criteria, it returns the collection.
	 * Otherwise if this sfGuardUser has previously been saved, it will retrieve
	 * related PubssRelatedByDestUserId from storage. If this sfGuardUser is new, it will return
	 * an empty collection or the current collection, the criteria is ignored on a new object.
	 *
	 * @param      PropelPDO $con
	 * @param      Criteria $criteria
	 * @return     array Pubs[]
	 * @throws     PropelException
	 */
	public function getPubssRelatedByDestUserId($criteria = null, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(sfGuardUserPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collPubssRelatedByDestUserId === null) {
			if ($this->isNew()) {
			   $this->collPubssRelatedByDestUserId = array();
			} else {

				$criteria->add(PubsPeer::DEST_USER_ID, $this->id);

				PubsPeer::addSelectColumns($criteria);
				$this->collPubssRelatedByDestUserId = PubsPeer::doSelect($criteria, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return the collection.


				$criteria->add(PubsPeer::DEST_USER_ID, $this->id);

				PubsPeer::addSelectColumns($criteria);
				if (!isset($this->lastPubsRelatedByDestUserIdCriteria) || !$this->lastPubsRelatedByDestUserIdCriteria->equals($criteria)) {
					$this->collPubssRelatedByDestUserId = PubsPeer::doSelect($criteria, $con);
				}
			}
		}
		$this->lastPubsRelatedByDestUserIdCriteria = $criteria;
		return $this->collPubssRelatedByDestUserId;
	}

	/**
	 * Returns the number of related Pubs objects.
	 *
	 * @param      Criteria $criteria
	 * @param      boolean $distinct
	 * @param      PropelPDO $con
	 * @return     int Count of related Pubs objects.
	 * @throws     PropelException
	 */
	public function countPubssRelatedByDestUserId(Criteria $criteria = null, $distinct = false, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(sfGuardUserPeer::DATABASE_NAME);
		} else {
			$criteria = clone $criteria;
		}

		if ($distinct) {
			$criteria->setDistinct();
		}

		$count = null;

		if ($this->collPubssRelatedByDestUserId === null) {
			if ($this->isNew()) {
				$count = 0;
			} else {

				$criteria->add(PubsPeer::DEST_USER_ID, $this->id);

				$count = PubsPeer::doCount($criteria, false, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return count of the collection.


				$criteria->add(PubsPeer::DEST_USER_ID, $this->id);

				if (!isset($this->lastPubsRelatedByDestUserIdCriteria) || !$this->lastPubsRelatedByDestUserIdCriteria->equals($criteria)) {
					$count = PubsPeer::doCount($criteria, false, $con);
				} else {
					$count = count($this->collPubssRelatedByDestUserId);
				}
			} else {
				$count = count($this->collPubssRelatedByDestUserId);
			}
		}
		return $count;
	}

	/**
	 * Method called to associate a Pubs object to this object
	 * through the Pubs foreign key attribute.
	 *
	 * @param      Pubs $l Pubs
	 * @return     void
	 * @throws     PropelException
	 */
	public function addPubsRelatedByDestUserId(Pubs $l)
	{
		if ($this->collPubssRelatedByDestUserId === null) {
			$this->initPubssRelatedByDestUserId();
		}
		if (!in_array($l, $this->collPubssRelatedByDestUserId, true)) { // only add it if the **same** object is not already associated
			array_push($this->collPubssRelatedByDestUserId, $l);
			$l->setsfGuardUserRelatedByDestUserId($this);
		}
	}

	/**
	 * Clears out the collAudiosRelatedByUserId collection (array).
	 *
	 * This does not modify the database; however, it will remove any associated objects, causing
	 * them to be refetched by subsequent calls to accessor method.
	 *
	 * @return     void
	 * @see        addAudiosRelatedByUserId()
	 */
	public function clearAudiosRelatedByUserId()
	{
		$this->collAudiosRelatedByUserId = null; // important to set this to NULL since that means it is uninitialized
	}

	/**
	 * Initializes the collAudiosRelatedByUserId collection (array).
	 *
	 * By default this just sets the collAudiosRelatedByUserId collection to an empty array (like clearcollAudiosRelatedByUserId());
	 * however, you may wish to override this method in your stub class to provide setting appropriate
	 * to your application -- for example, setting the initial array to the values stored in database.
	 *
	 * @return     void
	 */
	public function initAudiosRelatedByUserId()
	{
		$this->collAudiosRelatedByUserId = array();
	}

	/**
	 * Gets an array of Audio objects which contain a foreign key that references this object.
	 *
	 * If this collection has already been initialized with an identical Criteria, it returns the collection.
	 * Otherwise if this sfGuardUser has previously been saved, it will retrieve
	 * related AudiosRelatedByUserId from storage. If this sfGuardUser is new, it will return
	 * an empty collection or the current collection, the criteria is ignored on a new object.
	 *
	 * @param      PropelPDO $con
	 * @param      Criteria $criteria
	 * @return     array Audio[]
	 * @throws     PropelException
	 */
	public function getAudiosRelatedByUserId($criteria = null, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(sfGuardUserPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collAudiosRelatedByUserId === null) {
			if ($this->isNew()) {
			   $this->collAudiosRelatedByUserId = array();
			} else {

				$criteria->add(AudioPeer::USER_ID, $this->id);

				AudioPeer::addSelectColumns($criteria);
				$this->collAudiosRelatedByUserId = AudioPeer::doSelect($criteria, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return the collection.


				$criteria->add(AudioPeer::USER_ID, $this->id);

				AudioPeer::addSelectColumns($criteria);
				if (!isset($this->lastAudioRelatedByUserIdCriteria) || !$this->lastAudioRelatedByUserIdCriteria->equals($criteria)) {
					$this->collAudiosRelatedByUserId = AudioPeer::doSelect($criteria, $con);
				}
			}
		}
		$this->lastAudioRelatedByUserIdCriteria = $criteria;
		return $this->collAudiosRelatedByUserId;
	}

	/**
	 * Returns the number of related Audio objects.
	 *
	 * @param      Criteria $criteria
	 * @param      boolean $distinct
	 * @param      PropelPDO $con
	 * @return     int Count of related Audio objects.
	 * @throws     PropelException
	 */
	public function countAudiosRelatedByUserId(Criteria $criteria = null, $distinct = false, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(sfGuardUserPeer::DATABASE_NAME);
		} else {
			$criteria = clone $criteria;
		}

		if ($distinct) {
			$criteria->setDistinct();
		}

		$count = null;

		if ($this->collAudiosRelatedByUserId === null) {
			if ($this->isNew()) {
				$count = 0;
			} else {

				$criteria->add(AudioPeer::USER_ID, $this->id);

				$count = AudioPeer::doCount($criteria, false, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return count of the collection.


				$criteria->add(AudioPeer::USER_ID, $this->id);

				if (!isset($this->lastAudioRelatedByUserIdCriteria) || !$this->lastAudioRelatedByUserIdCriteria->equals($criteria)) {
					$count = AudioPeer::doCount($criteria, false, $con);
				} else {
					$count = count($this->collAudiosRelatedByUserId);
				}
			} else {
				$count = count($this->collAudiosRelatedByUserId);
			}
		}
		return $count;
	}

	/**
	 * Method called to associate a Audio object to this object
	 * through the Audio foreign key attribute.
	 *
	 * @param      Audio $l Audio
	 * @return     void
	 * @throws     PropelException
	 */
	public function addAudioRelatedByUserId(Audio $l)
	{
		if ($this->collAudiosRelatedByUserId === null) {
			$this->initAudiosRelatedByUserId();
		}
		if (!in_array($l, $this->collAudiosRelatedByUserId, true)) { // only add it if the **same** object is not already associated
			array_push($this->collAudiosRelatedByUserId, $l);
			$l->setsfGuardUserRelatedByUserId($this);
		}
	}

	/**
	 * Clears out the collAudiosRelatedByDestUserId collection (array).
	 *
	 * This does not modify the database; however, it will remove any associated objects, causing
	 * them to be refetched by subsequent calls to accessor method.
	 *
	 * @return     void
	 * @see        addAudiosRelatedByDestUserId()
	 */
	public function clearAudiosRelatedByDestUserId()
	{
		$this->collAudiosRelatedByDestUserId = null; // important to set this to NULL since that means it is uninitialized
	}

	/**
	 * Initializes the collAudiosRelatedByDestUserId collection (array).
	 *
	 * By default this just sets the collAudiosRelatedByDestUserId collection to an empty array (like clearcollAudiosRelatedByDestUserId());
	 * however, you may wish to override this method in your stub class to provide setting appropriate
	 * to your application -- for example, setting the initial array to the values stored in database.
	 *
	 * @return     void
	 */
	public function initAudiosRelatedByDestUserId()
	{
		$this->collAudiosRelatedByDestUserId = array();
	}

	/**
	 * Gets an array of Audio objects which contain a foreign key that references this object.
	 *
	 * If this collection has already been initialized with an identical Criteria, it returns the collection.
	 * Otherwise if this sfGuardUser has previously been saved, it will retrieve
	 * related AudiosRelatedByDestUserId from storage. If this sfGuardUser is new, it will return
	 * an empty collection or the current collection, the criteria is ignored on a new object.
	 *
	 * @param      PropelPDO $con
	 * @param      Criteria $criteria
	 * @return     array Audio[]
	 * @throws     PropelException
	 */
	public function getAudiosRelatedByDestUserId($criteria = null, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(sfGuardUserPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collAudiosRelatedByDestUserId === null) {
			if ($this->isNew()) {
			   $this->collAudiosRelatedByDestUserId = array();
			} else {

				$criteria->add(AudioPeer::DEST_USER_ID, $this->id);

				AudioPeer::addSelectColumns($criteria);
				$this->collAudiosRelatedByDestUserId = AudioPeer::doSelect($criteria, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return the collection.


				$criteria->add(AudioPeer::DEST_USER_ID, $this->id);

				AudioPeer::addSelectColumns($criteria);
				if (!isset($this->lastAudioRelatedByDestUserIdCriteria) || !$this->lastAudioRelatedByDestUserIdCriteria->equals($criteria)) {
					$this->collAudiosRelatedByDestUserId = AudioPeer::doSelect($criteria, $con);
				}
			}
		}
		$this->lastAudioRelatedByDestUserIdCriteria = $criteria;
		return $this->collAudiosRelatedByDestUserId;
	}

	/**
	 * Returns the number of related Audio objects.
	 *
	 * @param      Criteria $criteria
	 * @param      boolean $distinct
	 * @param      PropelPDO $con
	 * @return     int Count of related Audio objects.
	 * @throws     PropelException
	 */
	public function countAudiosRelatedByDestUserId(Criteria $criteria = null, $distinct = false, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(sfGuardUserPeer::DATABASE_NAME);
		} else {
			$criteria = clone $criteria;
		}

		if ($distinct) {
			$criteria->setDistinct();
		}

		$count = null;

		if ($this->collAudiosRelatedByDestUserId === null) {
			if ($this->isNew()) {
				$count = 0;
			} else {

				$criteria->add(AudioPeer::DEST_USER_ID, $this->id);

				$count = AudioPeer::doCount($criteria, false, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return count of the collection.


				$criteria->add(AudioPeer::DEST_USER_ID, $this->id);

				if (!isset($this->lastAudioRelatedByDestUserIdCriteria) || !$this->lastAudioRelatedByDestUserIdCriteria->equals($criteria)) {
					$count = AudioPeer::doCount($criteria, false, $con);
				} else {
					$count = count($this->collAudiosRelatedByDestUserId);
				}
			} else {
				$count = count($this->collAudiosRelatedByDestUserId);
			}
		}
		return $count;
	}

	/**
	 * Method called to associate a Audio object to this object
	 * through the Audio foreign key attribute.
	 *
	 * @param      Audio $l Audio
	 * @return     void
	 * @throws     PropelException
	 */
	public function addAudioRelatedByDestUserId(Audio $l)
	{
		if ($this->collAudiosRelatedByDestUserId === null) {
			$this->initAudiosRelatedByDestUserId();
		}
		if (!in_array($l, $this->collAudiosRelatedByDestUserId, true)) { // only add it if the **same** object is not already associated
			array_push($this->collAudiosRelatedByDestUserId, $l);
			$l->setsfGuardUserRelatedByDestUserId($this);
		}
	}

	/**
	 * Clears out the collPlaylists collection (array).
	 *
	 * This does not modify the database; however, it will remove any associated objects, causing
	 * them to be refetched by subsequent calls to accessor method.
	 *
	 * @return     void
	 * @see        addPlaylists()
	 */
	public function clearPlaylists()
	{
		$this->collPlaylists = null; // important to set this to NULL since that means it is uninitialized
	}

	/**
	 * Initializes the collPlaylists collection (array).
	 *
	 * By default this just sets the collPlaylists collection to an empty array (like clearcollPlaylists());
	 * however, you may wish to override this method in your stub class to provide setting appropriate
	 * to your application -- for example, setting the initial array to the values stored in database.
	 *
	 * @return     void
	 */
	public function initPlaylists()
	{
		$this->collPlaylists = array();
	}

	/**
	 * Gets an array of Playlist objects which contain a foreign key that references this object.
	 *
	 * If this collection has already been initialized with an identical Criteria, it returns the collection.
	 * Otherwise if this sfGuardUser has previously been saved, it will retrieve
	 * related Playlists from storage. If this sfGuardUser is new, it will return
	 * an empty collection or the current collection, the criteria is ignored on a new object.
	 *
	 * @param      PropelPDO $con
	 * @param      Criteria $criteria
	 * @return     array Playlist[]
	 * @throws     PropelException
	 */
	public function getPlaylists($criteria = null, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(sfGuardUserPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collPlaylists === null) {
			if ($this->isNew()) {
			   $this->collPlaylists = array();
			} else {

				$criteria->add(PlaylistPeer::USER_ID, $this->id);

				PlaylistPeer::addSelectColumns($criteria);
				$this->collPlaylists = PlaylistPeer::doSelect($criteria, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return the collection.


				$criteria->add(PlaylistPeer::USER_ID, $this->id);

				PlaylistPeer::addSelectColumns($criteria);
				if (!isset($this->lastPlaylistCriteria) || !$this->lastPlaylistCriteria->equals($criteria)) {
					$this->collPlaylists = PlaylistPeer::doSelect($criteria, $con);
				}
			}
		}
		$this->lastPlaylistCriteria = $criteria;
		return $this->collPlaylists;
	}

	/**
	 * Returns the number of related Playlist objects.
	 *
	 * @param      Criteria $criteria
	 * @param      boolean $distinct
	 * @param      PropelPDO $con
	 * @return     int Count of related Playlist objects.
	 * @throws     PropelException
	 */
	public function countPlaylists(Criteria $criteria = null, $distinct = false, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(sfGuardUserPeer::DATABASE_NAME);
		} else {
			$criteria = clone $criteria;
		}

		if ($distinct) {
			$criteria->setDistinct();
		}

		$count = null;

		if ($this->collPlaylists === null) {
			if ($this->isNew()) {
				$count = 0;
			} else {

				$criteria->add(PlaylistPeer::USER_ID, $this->id);

				$count = PlaylistPeer::doCount($criteria, false, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return count of the collection.


				$criteria->add(PlaylistPeer::USER_ID, $this->id);

				if (!isset($this->lastPlaylistCriteria) || !$this->lastPlaylistCriteria->equals($criteria)) {
					$count = PlaylistPeer::doCount($criteria, false, $con);
				} else {
					$count = count($this->collPlaylists);
				}
			} else {
				$count = count($this->collPlaylists);
			}
		}
		return $count;
	}

	/**
	 * Method called to associate a Playlist object to this object
	 * through the Playlist foreign key attribute.
	 *
	 * @param      Playlist $l Playlist
	 * @return     void
	 * @throws     PropelException
	 */
	public function addPlaylist(Playlist $l)
	{
		if ($this->collPlaylists === null) {
			$this->initPlaylists();
		}
		if (!in_array($l, $this->collPlaylists, true)) { // only add it if the **same** object is not already associated
			array_push($this->collPlaylists, $l);
			$l->setsfGuardUser($this);
		}
	}

	/**
	 * Clears out the collTexts collection (array).
	 *
	 * This does not modify the database; however, it will remove any associated objects, causing
	 * them to be refetched by subsequent calls to accessor method.
	 *
	 * @return     void
	 * @see        addTexts()
	 */
	public function clearTexts()
	{
		$this->collTexts = null; // important to set this to NULL since that means it is uninitialized
	}

	/**
	 * Initializes the collTexts collection (array).
	 *
	 * By default this just sets the collTexts collection to an empty array (like clearcollTexts());
	 * however, you may wish to override this method in your stub class to provide setting appropriate
	 * to your application -- for example, setting the initial array to the values stored in database.
	 *
	 * @return     void
	 */
	public function initTexts()
	{
		$this->collTexts = array();
	}

	/**
	 * Gets an array of Text objects which contain a foreign key that references this object.
	 *
	 * If this collection has already been initialized with an identical Criteria, it returns the collection.
	 * Otherwise if this sfGuardUser has previously been saved, it will retrieve
	 * related Texts from storage. If this sfGuardUser is new, it will return
	 * an empty collection or the current collection, the criteria is ignored on a new object.
	 *
	 * @param      PropelPDO $con
	 * @param      Criteria $criteria
	 * @return     array Text[]
	 * @throws     PropelException
	 */
	public function getTexts($criteria = null, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(sfGuardUserPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collTexts === null) {
			if ($this->isNew()) {
			   $this->collTexts = array();
			} else {

				$criteria->add(TextPeer::USER_ID, $this->id);

				TextPeer::addSelectColumns($criteria);
				$this->collTexts = TextPeer::doSelect($criteria, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return the collection.


				$criteria->add(TextPeer::USER_ID, $this->id);

				TextPeer::addSelectColumns($criteria);
				if (!isset($this->lastTextCriteria) || !$this->lastTextCriteria->equals($criteria)) {
					$this->collTexts = TextPeer::doSelect($criteria, $con);
				}
			}
		}
		$this->lastTextCriteria = $criteria;
		return $this->collTexts;
	}

	/**
	 * Returns the number of related Text objects.
	 *
	 * @param      Criteria $criteria
	 * @param      boolean $distinct
	 * @param      PropelPDO $con
	 * @return     int Count of related Text objects.
	 * @throws     PropelException
	 */
	public function countTexts(Criteria $criteria = null, $distinct = false, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(sfGuardUserPeer::DATABASE_NAME);
		} else {
			$criteria = clone $criteria;
		}

		if ($distinct) {
			$criteria->setDistinct();
		}

		$count = null;

		if ($this->collTexts === null) {
			if ($this->isNew()) {
				$count = 0;
			} else {

				$criteria->add(TextPeer::USER_ID, $this->id);

				$count = TextPeer::doCount($criteria, false, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return count of the collection.


				$criteria->add(TextPeer::USER_ID, $this->id);

				if (!isset($this->lastTextCriteria) || !$this->lastTextCriteria->equals($criteria)) {
					$count = TextPeer::doCount($criteria, false, $con);
				} else {
					$count = count($this->collTexts);
				}
			} else {
				$count = count($this->collTexts);
			}
		}
		return $count;
	}

	/**
	 * Method called to associate a Text object to this object
	 * through the Text foreign key attribute.
	 *
	 * @param      Text $l Text
	 * @return     void
	 * @throws     PropelException
	 */
	public function addText(Text $l)
	{
		if ($this->collTexts === null) {
			$this->initTexts();
		}
		if (!in_array($l, $this->collTexts, true)) { // only add it if the **same** object is not already associated
			array_push($this->collTexts, $l);
			$l->setsfGuardUser($this);
		}
	}

	/**
	 * Clears out the collLinks collection (array).
	 *
	 * This does not modify the database; however, it will remove any associated objects, causing
	 * them to be refetched by subsequent calls to accessor method.
	 *
	 * @return     void
	 * @see        addLinks()
	 */
	public function clearLinks()
	{
		$this->collLinks = null; // important to set this to NULL since that means it is uninitialized
	}

	/**
	 * Initializes the collLinks collection (array).
	 *
	 * By default this just sets the collLinks collection to an empty array (like clearcollLinks());
	 * however, you may wish to override this method in your stub class to provide setting appropriate
	 * to your application -- for example, setting the initial array to the values stored in database.
	 *
	 * @return     void
	 */
	public function initLinks()
	{
		$this->collLinks = array();
	}

	/**
	 * Gets an array of Link objects which contain a foreign key that references this object.
	 *
	 * If this collection has already been initialized with an identical Criteria, it returns the collection.
	 * Otherwise if this sfGuardUser has previously been saved, it will retrieve
	 * related Links from storage. If this sfGuardUser is new, it will return
	 * an empty collection or the current collection, the criteria is ignored on a new object.
	 *
	 * @param      PropelPDO $con
	 * @param      Criteria $criteria
	 * @return     array Link[]
	 * @throws     PropelException
	 */
	public function getLinks($criteria = null, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(sfGuardUserPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collLinks === null) {
			if ($this->isNew()) {
			   $this->collLinks = array();
			} else {

				$criteria->add(LinkPeer::USER_ID, $this->id);

				LinkPeer::addSelectColumns($criteria);
				$this->collLinks = LinkPeer::doSelect($criteria, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return the collection.


				$criteria->add(LinkPeer::USER_ID, $this->id);

				LinkPeer::addSelectColumns($criteria);
				if (!isset($this->lastLinkCriteria) || !$this->lastLinkCriteria->equals($criteria)) {
					$this->collLinks = LinkPeer::doSelect($criteria, $con);
				}
			}
		}
		$this->lastLinkCriteria = $criteria;
		return $this->collLinks;
	}

	/**
	 * Returns the number of related Link objects.
	 *
	 * @param      Criteria $criteria
	 * @param      boolean $distinct
	 * @param      PropelPDO $con
	 * @return     int Count of related Link objects.
	 * @throws     PropelException
	 */
	public function countLinks(Criteria $criteria = null, $distinct = false, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(sfGuardUserPeer::DATABASE_NAME);
		} else {
			$criteria = clone $criteria;
		}

		if ($distinct) {
			$criteria->setDistinct();
		}

		$count = null;

		if ($this->collLinks === null) {
			if ($this->isNew()) {
				$count = 0;
			} else {

				$criteria->add(LinkPeer::USER_ID, $this->id);

				$count = LinkPeer::doCount($criteria, false, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return count of the collection.


				$criteria->add(LinkPeer::USER_ID, $this->id);

				if (!isset($this->lastLinkCriteria) || !$this->lastLinkCriteria->equals($criteria)) {
					$count = LinkPeer::doCount($criteria, false, $con);
				} else {
					$count = count($this->collLinks);
				}
			} else {
				$count = count($this->collLinks);
			}
		}
		return $count;
	}

	/**
	 * Method called to associate a Link object to this object
	 * through the Link foreign key attribute.
	 *
	 * @param      Link $l Link
	 * @return     void
	 * @throws     PropelException
	 */
	public function addLink(Link $l)
	{
		if ($this->collLinks === null) {
			$this->initLinks();
		}
		if (!in_array($l, $this->collLinks, true)) { // only add it if the **same** object is not already associated
			array_push($this->collLinks, $l);
			$l->setsfGuardUser($this);
		}
	}

	/**
	 * Clears out the collFollowsRelatedByUserId collection (array).
	 *
	 * This does not modify the database; however, it will remove any associated objects, causing
	 * them to be refetched by subsequent calls to accessor method.
	 *
	 * @return     void
	 * @see        addFollowsRelatedByUserId()
	 */
	public function clearFollowsRelatedByUserId()
	{
		$this->collFollowsRelatedByUserId = null; // important to set this to NULL since that means it is uninitialized
	}

	/**
	 * Initializes the collFollowsRelatedByUserId collection (array).
	 *
	 * By default this just sets the collFollowsRelatedByUserId collection to an empty array (like clearcollFollowsRelatedByUserId());
	 * however, you may wish to override this method in your stub class to provide setting appropriate
	 * to your application -- for example, setting the initial array to the values stored in database.
	 *
	 * @return     void
	 */
	public function initFollowsRelatedByUserId()
	{
		$this->collFollowsRelatedByUserId = array();
	}

	/**
	 * Gets an array of Follow objects which contain a foreign key that references this object.
	 *
	 * If this collection has already been initialized with an identical Criteria, it returns the collection.
	 * Otherwise if this sfGuardUser has previously been saved, it will retrieve
	 * related FollowsRelatedByUserId from storage. If this sfGuardUser is new, it will return
	 * an empty collection or the current collection, the criteria is ignored on a new object.
	 *
	 * @param      PropelPDO $con
	 * @param      Criteria $criteria
	 * @return     array Follow[]
	 * @throws     PropelException
	 */
	public function getFollowsRelatedByUserId($criteria = null, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(sfGuardUserPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collFollowsRelatedByUserId === null) {
			if ($this->isNew()) {
			   $this->collFollowsRelatedByUserId = array();
			} else {

				$criteria->add(FollowPeer::USER_ID, $this->id);

				FollowPeer::addSelectColumns($criteria);
				$this->collFollowsRelatedByUserId = FollowPeer::doSelect($criteria, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return the collection.


				$criteria->add(FollowPeer::USER_ID, $this->id);

				FollowPeer::addSelectColumns($criteria);
				if (!isset($this->lastFollowRelatedByUserIdCriteria) || !$this->lastFollowRelatedByUserIdCriteria->equals($criteria)) {
					$this->collFollowsRelatedByUserId = FollowPeer::doSelect($criteria, $con);
				}
			}
		}
		$this->lastFollowRelatedByUserIdCriteria = $criteria;
		return $this->collFollowsRelatedByUserId;
	}

	/**
	 * Returns the number of related Follow objects.
	 *
	 * @param      Criteria $criteria
	 * @param      boolean $distinct
	 * @param      PropelPDO $con
	 * @return     int Count of related Follow objects.
	 * @throws     PropelException
	 */
	public function countFollowsRelatedByUserId(Criteria $criteria = null, $distinct = false, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(sfGuardUserPeer::DATABASE_NAME);
		} else {
			$criteria = clone $criteria;
		}

		if ($distinct) {
			$criteria->setDistinct();
		}

		$count = null;

		if ($this->collFollowsRelatedByUserId === null) {
			if ($this->isNew()) {
				$count = 0;
			} else {

				$criteria->add(FollowPeer::USER_ID, $this->id);

				$count = FollowPeer::doCount($criteria, false, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return count of the collection.


				$criteria->add(FollowPeer::USER_ID, $this->id);

				if (!isset($this->lastFollowRelatedByUserIdCriteria) || !$this->lastFollowRelatedByUserIdCriteria->equals($criteria)) {
					$count = FollowPeer::doCount($criteria, false, $con);
				} else {
					$count = count($this->collFollowsRelatedByUserId);
				}
			} else {
				$count = count($this->collFollowsRelatedByUserId);
			}
		}
		return $count;
	}

	/**
	 * Method called to associate a Follow object to this object
	 * through the Follow foreign key attribute.
	 *
	 * @param      Follow $l Follow
	 * @return     void
	 * @throws     PropelException
	 */
	public function addFollowRelatedByUserId(Follow $l)
	{
		if ($this->collFollowsRelatedByUserId === null) {
			$this->initFollowsRelatedByUserId();
		}
		if (!in_array($l, $this->collFollowsRelatedByUserId, true)) { // only add it if the **same** object is not already associated
			array_push($this->collFollowsRelatedByUserId, $l);
			$l->setsfGuardUserRelatedByUserId($this);
		}
	}

	/**
	 * Clears out the collFollowsRelatedByFollowId collection (array).
	 *
	 * This does not modify the database; however, it will remove any associated objects, causing
	 * them to be refetched by subsequent calls to accessor method.
	 *
	 * @return     void
	 * @see        addFollowsRelatedByFollowId()
	 */
	public function clearFollowsRelatedByFollowId()
	{
		$this->collFollowsRelatedByFollowId = null; // important to set this to NULL since that means it is uninitialized
	}

	/**
	 * Initializes the collFollowsRelatedByFollowId collection (array).
	 *
	 * By default this just sets the collFollowsRelatedByFollowId collection to an empty array (like clearcollFollowsRelatedByFollowId());
	 * however, you may wish to override this method in your stub class to provide setting appropriate
	 * to your application -- for example, setting the initial array to the values stored in database.
	 *
	 * @return     void
	 */
	public function initFollowsRelatedByFollowId()
	{
		$this->collFollowsRelatedByFollowId = array();
	}

	/**
	 * Gets an array of Follow objects which contain a foreign key that references this object.
	 *
	 * If this collection has already been initialized with an identical Criteria, it returns the collection.
	 * Otherwise if this sfGuardUser has previously been saved, it will retrieve
	 * related FollowsRelatedByFollowId from storage. If this sfGuardUser is new, it will return
	 * an empty collection or the current collection, the criteria is ignored on a new object.
	 *
	 * @param      PropelPDO $con
	 * @param      Criteria $criteria
	 * @return     array Follow[]
	 * @throws     PropelException
	 */
	public function getFollowsRelatedByFollowId($criteria = null, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(sfGuardUserPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collFollowsRelatedByFollowId === null) {
			if ($this->isNew()) {
			   $this->collFollowsRelatedByFollowId = array();
			} else {

				$criteria->add(FollowPeer::FOLLOW_ID, $this->id);

				FollowPeer::addSelectColumns($criteria);
				$this->collFollowsRelatedByFollowId = FollowPeer::doSelect($criteria, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return the collection.


				$criteria->add(FollowPeer::FOLLOW_ID, $this->id);

				FollowPeer::addSelectColumns($criteria);
				if (!isset($this->lastFollowRelatedByFollowIdCriteria) || !$this->lastFollowRelatedByFollowIdCriteria->equals($criteria)) {
					$this->collFollowsRelatedByFollowId = FollowPeer::doSelect($criteria, $con);
				}
			}
		}
		$this->lastFollowRelatedByFollowIdCriteria = $criteria;
		return $this->collFollowsRelatedByFollowId;
	}

	/**
	 * Returns the number of related Follow objects.
	 *
	 * @param      Criteria $criteria
	 * @param      boolean $distinct
	 * @param      PropelPDO $con
	 * @return     int Count of related Follow objects.
	 * @throws     PropelException
	 */
	public function countFollowsRelatedByFollowId(Criteria $criteria = null, $distinct = false, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(sfGuardUserPeer::DATABASE_NAME);
		} else {
			$criteria = clone $criteria;
		}

		if ($distinct) {
			$criteria->setDistinct();
		}

		$count = null;

		if ($this->collFollowsRelatedByFollowId === null) {
			if ($this->isNew()) {
				$count = 0;
			} else {

				$criteria->add(FollowPeer::FOLLOW_ID, $this->id);

				$count = FollowPeer::doCount($criteria, false, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return count of the collection.


				$criteria->add(FollowPeer::FOLLOW_ID, $this->id);

				if (!isset($this->lastFollowRelatedByFollowIdCriteria) || !$this->lastFollowRelatedByFollowIdCriteria->equals($criteria)) {
					$count = FollowPeer::doCount($criteria, false, $con);
				} else {
					$count = count($this->collFollowsRelatedByFollowId);
				}
			} else {
				$count = count($this->collFollowsRelatedByFollowId);
			}
		}
		return $count;
	}

	/**
	 * Method called to associate a Follow object to this object
	 * through the Follow foreign key attribute.
	 *
	 * @param      Follow $l Follow
	 * @return     void
	 * @throws     PropelException
	 */
	public function addFollowRelatedByFollowId(Follow $l)
	{
		if ($this->collFollowsRelatedByFollowId === null) {
			$this->initFollowsRelatedByFollowId();
		}
		if (!in_array($l, $this->collFollowsRelatedByFollowId, true)) { // only add it if the **same** object is not already associated
			array_push($this->collFollowsRelatedByFollowId, $l);
			$l->setsfGuardUserRelatedByFollowId($this);
		}
	}

	/**
	 * Clears out the collNotificationsRelatedByUserId collection (array).
	 *
	 * This does not modify the database; however, it will remove any associated objects, causing
	 * them to be refetched by subsequent calls to accessor method.
	 *
	 * @return     void
	 * @see        addNotificationsRelatedByUserId()
	 */
	public function clearNotificationsRelatedByUserId()
	{
		$this->collNotificationsRelatedByUserId = null; // important to set this to NULL since that means it is uninitialized
	}

	/**
	 * Initializes the collNotificationsRelatedByUserId collection (array).
	 *
	 * By default this just sets the collNotificationsRelatedByUserId collection to an empty array (like clearcollNotificationsRelatedByUserId());
	 * however, you may wish to override this method in your stub class to provide setting appropriate
	 * to your application -- for example, setting the initial array to the values stored in database.
	 *
	 * @return     void
	 */
	public function initNotificationsRelatedByUserId()
	{
		$this->collNotificationsRelatedByUserId = array();
	}

	/**
	 * Gets an array of Notification objects which contain a foreign key that references this object.
	 *
	 * If this collection has already been initialized with an identical Criteria, it returns the collection.
	 * Otherwise if this sfGuardUser has previously been saved, it will retrieve
	 * related NotificationsRelatedByUserId from storage. If this sfGuardUser is new, it will return
	 * an empty collection or the current collection, the criteria is ignored on a new object.
	 *
	 * @param      PropelPDO $con
	 * @param      Criteria $criteria
	 * @return     array Notification[]
	 * @throws     PropelException
	 */
	public function getNotificationsRelatedByUserId($criteria = null, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(sfGuardUserPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collNotificationsRelatedByUserId === null) {
			if ($this->isNew()) {
			   $this->collNotificationsRelatedByUserId = array();
			} else {

				$criteria->add(NotificationPeer::USER_ID, $this->id);

				NotificationPeer::addSelectColumns($criteria);
				$this->collNotificationsRelatedByUserId = NotificationPeer::doSelect($criteria, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return the collection.


				$criteria->add(NotificationPeer::USER_ID, $this->id);

				NotificationPeer::addSelectColumns($criteria);
				if (!isset($this->lastNotificationRelatedByUserIdCriteria) || !$this->lastNotificationRelatedByUserIdCriteria->equals($criteria)) {
					$this->collNotificationsRelatedByUserId = NotificationPeer::doSelect($criteria, $con);
				}
			}
		}
		$this->lastNotificationRelatedByUserIdCriteria = $criteria;
		return $this->collNotificationsRelatedByUserId;
	}

	/**
	 * Returns the number of related Notification objects.
	 *
	 * @param      Criteria $criteria
	 * @param      boolean $distinct
	 * @param      PropelPDO $con
	 * @return     int Count of related Notification objects.
	 * @throws     PropelException
	 */
	public function countNotificationsRelatedByUserId(Criteria $criteria = null, $distinct = false, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(sfGuardUserPeer::DATABASE_NAME);
		} else {
			$criteria = clone $criteria;
		}

		if ($distinct) {
			$criteria->setDistinct();
		}

		$count = null;

		if ($this->collNotificationsRelatedByUserId === null) {
			if ($this->isNew()) {
				$count = 0;
			} else {

				$criteria->add(NotificationPeer::USER_ID, $this->id);

				$count = NotificationPeer::doCount($criteria, false, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return count of the collection.


				$criteria->add(NotificationPeer::USER_ID, $this->id);

				if (!isset($this->lastNotificationRelatedByUserIdCriteria) || !$this->lastNotificationRelatedByUserIdCriteria->equals($criteria)) {
					$count = NotificationPeer::doCount($criteria, false, $con);
				} else {
					$count = count($this->collNotificationsRelatedByUserId);
				}
			} else {
				$count = count($this->collNotificationsRelatedByUserId);
			}
		}
		return $count;
	}

	/**
	 * Method called to associate a Notification object to this object
	 * through the Notification foreign key attribute.
	 *
	 * @param      Notification $l Notification
	 * @return     void
	 * @throws     PropelException
	 */
	public function addNotificationRelatedByUserId(Notification $l)
	{
		if ($this->collNotificationsRelatedByUserId === null) {
			$this->initNotificationsRelatedByUserId();
		}
		if (!in_array($l, $this->collNotificationsRelatedByUserId, true)) { // only add it if the **same** object is not already associated
			array_push($this->collNotificationsRelatedByUserId, $l);
			$l->setsfGuardUserRelatedByUserId($this);
		}
	}

	/**
	 * Clears out the collNotificationsRelatedByDestUserId collection (array).
	 *
	 * This does not modify the database; however, it will remove any associated objects, causing
	 * them to be refetched by subsequent calls to accessor method.
	 *
	 * @return     void
	 * @see        addNotificationsRelatedByDestUserId()
	 */
	public function clearNotificationsRelatedByDestUserId()
	{
		$this->collNotificationsRelatedByDestUserId = null; // important to set this to NULL since that means it is uninitialized
	}

	/**
	 * Initializes the collNotificationsRelatedByDestUserId collection (array).
	 *
	 * By default this just sets the collNotificationsRelatedByDestUserId collection to an empty array (like clearcollNotificationsRelatedByDestUserId());
	 * however, you may wish to override this method in your stub class to provide setting appropriate
	 * to your application -- for example, setting the initial array to the values stored in database.
	 *
	 * @return     void
	 */
	public function initNotificationsRelatedByDestUserId()
	{
		$this->collNotificationsRelatedByDestUserId = array();
	}

	/**
	 * Gets an array of Notification objects which contain a foreign key that references this object.
	 *
	 * If this collection has already been initialized with an identical Criteria, it returns the collection.
	 * Otherwise if this sfGuardUser has previously been saved, it will retrieve
	 * related NotificationsRelatedByDestUserId from storage. If this sfGuardUser is new, it will return
	 * an empty collection or the current collection, the criteria is ignored on a new object.
	 *
	 * @param      PropelPDO $con
	 * @param      Criteria $criteria
	 * @return     array Notification[]
	 * @throws     PropelException
	 */
	public function getNotificationsRelatedByDestUserId($criteria = null, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(sfGuardUserPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collNotificationsRelatedByDestUserId === null) {
			if ($this->isNew()) {
			   $this->collNotificationsRelatedByDestUserId = array();
			} else {

				$criteria->add(NotificationPeer::DEST_USER_ID, $this->id);

				NotificationPeer::addSelectColumns($criteria);
				$this->collNotificationsRelatedByDestUserId = NotificationPeer::doSelect($criteria, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return the collection.


				$criteria->add(NotificationPeer::DEST_USER_ID, $this->id);

				NotificationPeer::addSelectColumns($criteria);
				if (!isset($this->lastNotificationRelatedByDestUserIdCriteria) || !$this->lastNotificationRelatedByDestUserIdCriteria->equals($criteria)) {
					$this->collNotificationsRelatedByDestUserId = NotificationPeer::doSelect($criteria, $con);
				}
			}
		}
		$this->lastNotificationRelatedByDestUserIdCriteria = $criteria;
		return $this->collNotificationsRelatedByDestUserId;
	}

	/**
	 * Returns the number of related Notification objects.
	 *
	 * @param      Criteria $criteria
	 * @param      boolean $distinct
	 * @param      PropelPDO $con
	 * @return     int Count of related Notification objects.
	 * @throws     PropelException
	 */
	public function countNotificationsRelatedByDestUserId(Criteria $criteria = null, $distinct = false, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(sfGuardUserPeer::DATABASE_NAME);
		} else {
			$criteria = clone $criteria;
		}

		if ($distinct) {
			$criteria->setDistinct();
		}

		$count = null;

		if ($this->collNotificationsRelatedByDestUserId === null) {
			if ($this->isNew()) {
				$count = 0;
			} else {

				$criteria->add(NotificationPeer::DEST_USER_ID, $this->id);

				$count = NotificationPeer::doCount($criteria, false, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return count of the collection.


				$criteria->add(NotificationPeer::DEST_USER_ID, $this->id);

				if (!isset($this->lastNotificationRelatedByDestUserIdCriteria) || !$this->lastNotificationRelatedByDestUserIdCriteria->equals($criteria)) {
					$count = NotificationPeer::doCount($criteria, false, $con);
				} else {
					$count = count($this->collNotificationsRelatedByDestUserId);
				}
			} else {
				$count = count($this->collNotificationsRelatedByDestUserId);
			}
		}
		return $count;
	}

	/**
	 * Method called to associate a Notification object to this object
	 * through the Notification foreign key attribute.
	 *
	 * @param      Notification $l Notification
	 * @return     void
	 * @throws     PropelException
	 */
	public function addNotificationRelatedByDestUserId(Notification $l)
	{
		if ($this->collNotificationsRelatedByDestUserId === null) {
			$this->initNotificationsRelatedByDestUserId();
		}
		if (!in_array($l, $this->collNotificationsRelatedByDestUserId, true)) { // only add it if the **same** object is not already associated
			array_push($this->collNotificationsRelatedByDestUserId, $l);
			$l->setsfGuardUserRelatedByDestUserId($this);
		}
	}

	/**
	 * Clears out the collSettingHasUsers collection (array).
	 *
	 * This does not modify the database; however, it will remove any associated objects, causing
	 * them to be refetched by subsequent calls to accessor method.
	 *
	 * @return     void
	 * @see        addSettingHasUsers()
	 */
	public function clearSettingHasUsers()
	{
		$this->collSettingHasUsers = null; // important to set this to NULL since that means it is uninitialized
	}

	/**
	 * Initializes the collSettingHasUsers collection (array).
	 *
	 * By default this just sets the collSettingHasUsers collection to an empty array (like clearcollSettingHasUsers());
	 * however, you may wish to override this method in your stub class to provide setting appropriate
	 * to your application -- for example, setting the initial array to the values stored in database.
	 *
	 * @return     void
	 */
	public function initSettingHasUsers()
	{
		$this->collSettingHasUsers = array();
	}

	/**
	 * Gets an array of SettingHasUser objects which contain a foreign key that references this object.
	 *
	 * If this collection has already been initialized with an identical Criteria, it returns the collection.
	 * Otherwise if this sfGuardUser has previously been saved, it will retrieve
	 * related SettingHasUsers from storage. If this sfGuardUser is new, it will return
	 * an empty collection or the current collection, the criteria is ignored on a new object.
	 *
	 * @param      PropelPDO $con
	 * @param      Criteria $criteria
	 * @return     array SettingHasUser[]
	 * @throws     PropelException
	 */
	public function getSettingHasUsers($criteria = null, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(sfGuardUserPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collSettingHasUsers === null) {
			if ($this->isNew()) {
			   $this->collSettingHasUsers = array();
			} else {

				$criteria->add(SettingHasUserPeer::USER_ID, $this->id);

				SettingHasUserPeer::addSelectColumns($criteria);
				$this->collSettingHasUsers = SettingHasUserPeer::doSelect($criteria, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return the collection.


				$criteria->add(SettingHasUserPeer::USER_ID, $this->id);

				SettingHasUserPeer::addSelectColumns($criteria);
				if (!isset($this->lastSettingHasUserCriteria) || !$this->lastSettingHasUserCriteria->equals($criteria)) {
					$this->collSettingHasUsers = SettingHasUserPeer::doSelect($criteria, $con);
				}
			}
		}
		$this->lastSettingHasUserCriteria = $criteria;
		return $this->collSettingHasUsers;
	}

	/**
	 * Returns the number of related SettingHasUser objects.
	 *
	 * @param      Criteria $criteria
	 * @param      boolean $distinct
	 * @param      PropelPDO $con
	 * @return     int Count of related SettingHasUser objects.
	 * @throws     PropelException
	 */
	public function countSettingHasUsers(Criteria $criteria = null, $distinct = false, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(sfGuardUserPeer::DATABASE_NAME);
		} else {
			$criteria = clone $criteria;
		}

		if ($distinct) {
			$criteria->setDistinct();
		}

		$count = null;

		if ($this->collSettingHasUsers === null) {
			if ($this->isNew()) {
				$count = 0;
			} else {

				$criteria->add(SettingHasUserPeer::USER_ID, $this->id);

				$count = SettingHasUserPeer::doCount($criteria, false, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return count of the collection.


				$criteria->add(SettingHasUserPeer::USER_ID, $this->id);

				if (!isset($this->lastSettingHasUserCriteria) || !$this->lastSettingHasUserCriteria->equals($criteria)) {
					$count = SettingHasUserPeer::doCount($criteria, false, $con);
				} else {
					$count = count($this->collSettingHasUsers);
				}
			} else {
				$count = count($this->collSettingHasUsers);
			}
		}
		return $count;
	}

	/**
	 * Method called to associate a SettingHasUser object to this object
	 * through the SettingHasUser foreign key attribute.
	 *
	 * @param      SettingHasUser $l SettingHasUser
	 * @return     void
	 * @throws     PropelException
	 */
	public function addSettingHasUser(SettingHasUser $l)
	{
		if ($this->collSettingHasUsers === null) {
			$this->initSettingHasUsers();
		}
		if (!in_array($l, $this->collSettingHasUsers, true)) { // only add it if the **same** object is not already associated
			array_push($this->collSettingHasUsers, $l);
			$l->setsfGuardUser($this);
		}
	}


	/**
	 * If this collection has already been initialized with
	 * an identical criteria, it returns the collection.
	 * Otherwise if this sfGuardUser is new, it will return
	 * an empty collection; or if this sfGuardUser has previously
	 * been saved, it will retrieve related SettingHasUsers from storage.
	 *
	 * This method is protected by default in order to keep the public
	 * api reasonable.  You can provide public methods for those you
	 * actually need in sfGuardUser.
	 */
	public function getSettingHasUsersJoinSetting($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		if ($criteria === null) {
			$criteria = new Criteria(sfGuardUserPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collSettingHasUsers === null) {
			if ($this->isNew()) {
				$this->collSettingHasUsers = array();
			} else {

				$criteria->add(SettingHasUserPeer::USER_ID, $this->id);

				$this->collSettingHasUsers = SettingHasUserPeer::doSelectJoinSetting($criteria, $con, $join_behavior);
			}
		} else {
			// the following code is to determine if a new query is
			// called for.  If the criteria is the same as the last
			// one, just return the collection.

			$criteria->add(SettingHasUserPeer::USER_ID, $this->id);

			if (!isset($this->lastSettingHasUserCriteria) || !$this->lastSettingHasUserCriteria->equals($criteria)) {
				$this->collSettingHasUsers = SettingHasUserPeer::doSelectJoinSetting($criteria, $con, $join_behavior);
			}
		}
		$this->lastSettingHasUserCriteria = $criteria;

		return $this->collSettingHasUsers;
	}

	/**
	 * Clears out the collEvents collection (array).
	 *
	 * This does not modify the database; however, it will remove any associated objects, causing
	 * them to be refetched by subsequent calls to accessor method.
	 *
	 * @return     void
	 * @see        addEvents()
	 */
	public function clearEvents()
	{
		$this->collEvents = null; // important to set this to NULL since that means it is uninitialized
	}

	/**
	 * Initializes the collEvents collection (array).
	 *
	 * By default this just sets the collEvents collection to an empty array (like clearcollEvents());
	 * however, you may wish to override this method in your stub class to provide setting appropriate
	 * to your application -- for example, setting the initial array to the values stored in database.
	 *
	 * @return     void
	 */
	public function initEvents()
	{
		$this->collEvents = array();
	}

	/**
	 * Gets an array of Event objects which contain a foreign key that references this object.
	 *
	 * If this collection has already been initialized with an identical Criteria, it returns the collection.
	 * Otherwise if this sfGuardUser has previously been saved, it will retrieve
	 * related Events from storage. If this sfGuardUser is new, it will return
	 * an empty collection or the current collection, the criteria is ignored on a new object.
	 *
	 * @param      PropelPDO $con
	 * @param      Criteria $criteria
	 * @return     array Event[]
	 * @throws     PropelException
	 */
	public function getEvents($criteria = null, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(sfGuardUserPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collEvents === null) {
			if ($this->isNew()) {
			   $this->collEvents = array();
			} else {

				$criteria->add(EventPeer::USER_ID, $this->id);

				EventPeer::addSelectColumns($criteria);
				$this->collEvents = EventPeer::doSelect($criteria, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return the collection.


				$criteria->add(EventPeer::USER_ID, $this->id);

				EventPeer::addSelectColumns($criteria);
				if (!isset($this->lastEventCriteria) || !$this->lastEventCriteria->equals($criteria)) {
					$this->collEvents = EventPeer::doSelect($criteria, $con);
				}
			}
		}
		$this->lastEventCriteria = $criteria;
		return $this->collEvents;
	}

	/**
	 * Returns the number of related Event objects.
	 *
	 * @param      Criteria $criteria
	 * @param      boolean $distinct
	 * @param      PropelPDO $con
	 * @return     int Count of related Event objects.
	 * @throws     PropelException
	 */
	public function countEvents(Criteria $criteria = null, $distinct = false, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(sfGuardUserPeer::DATABASE_NAME);
		} else {
			$criteria = clone $criteria;
		}

		if ($distinct) {
			$criteria->setDistinct();
		}

		$count = null;

		if ($this->collEvents === null) {
			if ($this->isNew()) {
				$count = 0;
			} else {

				$criteria->add(EventPeer::USER_ID, $this->id);

				$count = EventPeer::doCount($criteria, false, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return count of the collection.


				$criteria->add(EventPeer::USER_ID, $this->id);

				if (!isset($this->lastEventCriteria) || !$this->lastEventCriteria->equals($criteria)) {
					$count = EventPeer::doCount($criteria, false, $con);
				} else {
					$count = count($this->collEvents);
				}
			} else {
				$count = count($this->collEvents);
			}
		}
		return $count;
	}

	/**
	 * Method called to associate a Event object to this object
	 * through the Event foreign key attribute.
	 *
	 * @param      Event $l Event
	 * @return     void
	 * @throws     PropelException
	 */
	public function addEvent(Event $l)
	{
		if ($this->collEvents === null) {
			$this->initEvents();
		}
		if (!in_array($l, $this->collEvents, true)) { // only add it if the **same** object is not already associated
			array_push($this->collEvents, $l);
			$l->setsfGuardUser($this);
		}
	}


	/**
	 * If this collection has already been initialized with
	 * an identical criteria, it returns the collection.
	 * Otherwise if this sfGuardUser is new, it will return
	 * an empty collection; or if this sfGuardUser has previously
	 * been saved, it will retrieve related Events from storage.
	 *
	 * This method is protected by default in order to keep the public
	 * api reasonable.  You can provide public methods for those you
	 * actually need in sfGuardUser.
	 */
	public function getEventsJoinSetting($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		if ($criteria === null) {
			$criteria = new Criteria(sfGuardUserPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collEvents === null) {
			if ($this->isNew()) {
				$this->collEvents = array();
			} else {

				$criteria->add(EventPeer::USER_ID, $this->id);

				$this->collEvents = EventPeer::doSelectJoinSetting($criteria, $con, $join_behavior);
			}
		} else {
			// the following code is to determine if a new query is
			// called for.  If the criteria is the same as the last
			// one, just return the collection.

			$criteria->add(EventPeer::USER_ID, $this->id);

			if (!isset($this->lastEventCriteria) || !$this->lastEventCriteria->equals($criteria)) {
				$this->collEvents = EventPeer::doSelectJoinSetting($criteria, $con, $join_behavior);
			}
		}
		$this->lastEventCriteria = $criteria;

		return $this->collEvents;
	}

	/**
	 * Clears out the collAlbumPhotos collection (array).
	 *
	 * This does not modify the database; however, it will remove any associated objects, causing
	 * them to be refetched by subsequent calls to accessor method.
	 *
	 * @return     void
	 * @see        addAlbumPhotos()
	 */
	public function clearAlbumPhotos()
	{
		$this->collAlbumPhotos = null; // important to set this to NULL since that means it is uninitialized
	}

	/**
	 * Initializes the collAlbumPhotos collection (array).
	 *
	 * By default this just sets the collAlbumPhotos collection to an empty array (like clearcollAlbumPhotos());
	 * however, you may wish to override this method in your stub class to provide setting appropriate
	 * to your application -- for example, setting the initial array to the values stored in database.
	 *
	 * @return     void
	 */
	public function initAlbumPhotos()
	{
		$this->collAlbumPhotos = array();
	}

	/**
	 * Gets an array of AlbumPhoto objects which contain a foreign key that references this object.
	 *
	 * If this collection has already been initialized with an identical Criteria, it returns the collection.
	 * Otherwise if this sfGuardUser has previously been saved, it will retrieve
	 * related AlbumPhotos from storage. If this sfGuardUser is new, it will return
	 * an empty collection or the current collection, the criteria is ignored on a new object.
	 *
	 * @param      PropelPDO $con
	 * @param      Criteria $criteria
	 * @return     array AlbumPhoto[]
	 * @throws     PropelException
	 */
	public function getAlbumPhotos($criteria = null, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(sfGuardUserPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collAlbumPhotos === null) {
			if ($this->isNew()) {
			   $this->collAlbumPhotos = array();
			} else {

				$criteria->add(AlbumPhotoPeer::USER_ID, $this->id);

				AlbumPhotoPeer::addSelectColumns($criteria);
				$this->collAlbumPhotos = AlbumPhotoPeer::doSelect($criteria, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return the collection.


				$criteria->add(AlbumPhotoPeer::USER_ID, $this->id);

				AlbumPhotoPeer::addSelectColumns($criteria);
				if (!isset($this->lastAlbumPhotoCriteria) || !$this->lastAlbumPhotoCriteria->equals($criteria)) {
					$this->collAlbumPhotos = AlbumPhotoPeer::doSelect($criteria, $con);
				}
			}
		}
		$this->lastAlbumPhotoCriteria = $criteria;
		return $this->collAlbumPhotos;
	}

	/**
	 * Returns the number of related AlbumPhoto objects.
	 *
	 * @param      Criteria $criteria
	 * @param      boolean $distinct
	 * @param      PropelPDO $con
	 * @return     int Count of related AlbumPhoto objects.
	 * @throws     PropelException
	 */
	public function countAlbumPhotos(Criteria $criteria = null, $distinct = false, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(sfGuardUserPeer::DATABASE_NAME);
		} else {
			$criteria = clone $criteria;
		}

		if ($distinct) {
			$criteria->setDistinct();
		}

		$count = null;

		if ($this->collAlbumPhotos === null) {
			if ($this->isNew()) {
				$count = 0;
			} else {

				$criteria->add(AlbumPhotoPeer::USER_ID, $this->id);

				$count = AlbumPhotoPeer::doCount($criteria, false, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return count of the collection.


				$criteria->add(AlbumPhotoPeer::USER_ID, $this->id);

				if (!isset($this->lastAlbumPhotoCriteria) || !$this->lastAlbumPhotoCriteria->equals($criteria)) {
					$count = AlbumPhotoPeer::doCount($criteria, false, $con);
				} else {
					$count = count($this->collAlbumPhotos);
				}
			} else {
				$count = count($this->collAlbumPhotos);
			}
		}
		return $count;
	}

	/**
	 * Method called to associate a AlbumPhoto object to this object
	 * through the AlbumPhoto foreign key attribute.
	 *
	 * @param      AlbumPhoto $l AlbumPhoto
	 * @return     void
	 * @throws     PropelException
	 */
	public function addAlbumPhoto(AlbumPhoto $l)
	{
		if ($this->collAlbumPhotos === null) {
			$this->initAlbumPhotos();
		}
		if (!in_array($l, $this->collAlbumPhotos, true)) { // only add it if the **same** object is not already associated
			array_push($this->collAlbumPhotos, $l);
			$l->setsfGuardUser($this);
		}
	}


	/**
	 * If this collection has already been initialized with
	 * an identical criteria, it returns the collection.
	 * Otherwise if this sfGuardUser is new, it will return
	 * an empty collection; or if this sfGuardUser has previously
	 * been saved, it will retrieve related AlbumPhotos from storage.
	 *
	 * This method is protected by default in order to keep the public
	 * api reasonable.  You can provide public methods for those you
	 * actually need in sfGuardUser.
	 */
	public function getAlbumPhotosJoinPhoto($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		if ($criteria === null) {
			$criteria = new Criteria(sfGuardUserPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collAlbumPhotos === null) {
			if ($this->isNew()) {
				$this->collAlbumPhotos = array();
			} else {

				$criteria->add(AlbumPhotoPeer::USER_ID, $this->id);

				$this->collAlbumPhotos = AlbumPhotoPeer::doSelectJoinPhoto($criteria, $con, $join_behavior);
			}
		} else {
			// the following code is to determine if a new query is
			// called for.  If the criteria is the same as the last
			// one, just return the collection.

			$criteria->add(AlbumPhotoPeer::USER_ID, $this->id);

			if (!isset($this->lastAlbumPhotoCriteria) || !$this->lastAlbumPhotoCriteria->equals($criteria)) {
				$this->collAlbumPhotos = AlbumPhotoPeer::doSelectJoinPhoto($criteria, $con, $join_behavior);
			}
		}
		$this->lastAlbumPhotoCriteria = $criteria;

		return $this->collAlbumPhotos;
	}

	/**
	 * Clears out the collProfilePhotos collection (array).
	 *
	 * This does not modify the database; however, it will remove any associated objects, causing
	 * them to be refetched by subsequent calls to accessor method.
	 *
	 * @return     void
	 * @see        addProfilePhotos()
	 */
	public function clearProfilePhotos()
	{
		$this->collProfilePhotos = null; // important to set this to NULL since that means it is uninitialized
	}

	/**
	 * Initializes the collProfilePhotos collection (array).
	 *
	 * By default this just sets the collProfilePhotos collection to an empty array (like clearcollProfilePhotos());
	 * however, you may wish to override this method in your stub class to provide setting appropriate
	 * to your application -- for example, setting the initial array to the values stored in database.
	 *
	 * @return     void
	 */
	public function initProfilePhotos()
	{
		$this->collProfilePhotos = array();
	}

	/**
	 * Gets an array of ProfilePhoto objects which contain a foreign key that references this object.
	 *
	 * If this collection has already been initialized with an identical Criteria, it returns the collection.
	 * Otherwise if this sfGuardUser has previously been saved, it will retrieve
	 * related ProfilePhotos from storage. If this sfGuardUser is new, it will return
	 * an empty collection or the current collection, the criteria is ignored on a new object.
	 *
	 * @param      PropelPDO $con
	 * @param      Criteria $criteria
	 * @return     array ProfilePhoto[]
	 * @throws     PropelException
	 */
	public function getProfilePhotos($criteria = null, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(sfGuardUserPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collProfilePhotos === null) {
			if ($this->isNew()) {
			   $this->collProfilePhotos = array();
			} else {

				$criteria->add(ProfilePhotoPeer::USER_ID, $this->id);

				ProfilePhotoPeer::addSelectColumns($criteria);
				$this->collProfilePhotos = ProfilePhotoPeer::doSelect($criteria, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return the collection.


				$criteria->add(ProfilePhotoPeer::USER_ID, $this->id);

				ProfilePhotoPeer::addSelectColumns($criteria);
				if (!isset($this->lastProfilePhotoCriteria) || !$this->lastProfilePhotoCriteria->equals($criteria)) {
					$this->collProfilePhotos = ProfilePhotoPeer::doSelect($criteria, $con);
				}
			}
		}
		$this->lastProfilePhotoCriteria = $criteria;
		return $this->collProfilePhotos;
	}

	/**
	 * Returns the number of related ProfilePhoto objects.
	 *
	 * @param      Criteria $criteria
	 * @param      boolean $distinct
	 * @param      PropelPDO $con
	 * @return     int Count of related ProfilePhoto objects.
	 * @throws     PropelException
	 */
	public function countProfilePhotos(Criteria $criteria = null, $distinct = false, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(sfGuardUserPeer::DATABASE_NAME);
		} else {
			$criteria = clone $criteria;
		}

		if ($distinct) {
			$criteria->setDistinct();
		}

		$count = null;

		if ($this->collProfilePhotos === null) {
			if ($this->isNew()) {
				$count = 0;
			} else {

				$criteria->add(ProfilePhotoPeer::USER_ID, $this->id);

				$count = ProfilePhotoPeer::doCount($criteria, false, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return count of the collection.


				$criteria->add(ProfilePhotoPeer::USER_ID, $this->id);

				if (!isset($this->lastProfilePhotoCriteria) || !$this->lastProfilePhotoCriteria->equals($criteria)) {
					$count = ProfilePhotoPeer::doCount($criteria, false, $con);
				} else {
					$count = count($this->collProfilePhotos);
				}
			} else {
				$count = count($this->collProfilePhotos);
			}
		}
		return $count;
	}

	/**
	 * Method called to associate a ProfilePhoto object to this object
	 * through the ProfilePhoto foreign key attribute.
	 *
	 * @param      ProfilePhoto $l ProfilePhoto
	 * @return     void
	 * @throws     PropelException
	 */
	public function addProfilePhoto(ProfilePhoto $l)
	{
		if ($this->collProfilePhotos === null) {
			$this->initProfilePhotos();
		}
		if (!in_array($l, $this->collProfilePhotos, true)) { // only add it if the **same** object is not already associated
			array_push($this->collProfilePhotos, $l);
			$l->setsfGuardUser($this);
		}
	}


	/**
	 * If this collection has already been initialized with
	 * an identical criteria, it returns the collection.
	 * Otherwise if this sfGuardUser is new, it will return
	 * an empty collection; or if this sfGuardUser has previously
	 * been saved, it will retrieve related ProfilePhotos from storage.
	 *
	 * This method is protected by default in order to keep the public
	 * api reasonable.  You can provide public methods for those you
	 * actually need in sfGuardUser.
	 */
	public function getProfilePhotosJoinPhoto($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		if ($criteria === null) {
			$criteria = new Criteria(sfGuardUserPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collProfilePhotos === null) {
			if ($this->isNew()) {
				$this->collProfilePhotos = array();
			} else {

				$criteria->add(ProfilePhotoPeer::USER_ID, $this->id);

				$this->collProfilePhotos = ProfilePhotoPeer::doSelectJoinPhoto($criteria, $con, $join_behavior);
			}
		} else {
			// the following code is to determine if a new query is
			// called for.  If the criteria is the same as the last
			// one, just return the collection.

			$criteria->add(ProfilePhotoPeer::USER_ID, $this->id);

			if (!isset($this->lastProfilePhotoCriteria) || !$this->lastProfilePhotoCriteria->equals($criteria)) {
				$this->collProfilePhotos = ProfilePhotoPeer::doSelectJoinPhoto($criteria, $con, $join_behavior);
			}
		}
		$this->lastProfilePhotoCriteria = $criteria;

		return $this->collProfilePhotos;
	}

	/**
	 * Resets all collections of referencing foreign keys.
	 *
	 * This method is a user-space workaround for PHP's inability to garbage collect objects
	 * with circular references.  This is currently necessary when using Propel in certain
	 * daemon or large-volumne/high-memory operations.
	 *
	 * @param      boolean $deep Whether to also clear the references on all associated objects.
	 */
	public function clearAllReferences($deep = false)
	{
		if ($deep) {
			if ($this->collinboxsRelatedByUserId) {
				foreach ((array) $this->collinboxsRelatedByUserId as $o) {
					$o->clearAllReferences($deep);
				}
			}
			if ($this->collinboxsRelatedByDestUserId) {
				foreach ((array) $this->collinboxsRelatedByDestUserId as $o) {
					$o->clearAllReferences($deep);
				}
			}
			if ($this->collsfGuardUserPermissions) {
				foreach ((array) $this->collsfGuardUserPermissions as $o) {
					$o->clearAllReferences($deep);
				}
			}
			if ($this->collsfGuardUserGroups) {
				foreach ((array) $this->collsfGuardUserGroups as $o) {
					$o->clearAllReferences($deep);
				}
			}
			if ($this->collsfGuardRememberKeys) {
				foreach ((array) $this->collsfGuardRememberKeys as $o) {
					$o->clearAllReferences($deep);
				}
			}
			if ($this->singleSfguardforgotpassword) {
				$this->singleSfguardforgotpassword->clearAllReferences($deep);
			}
			if ($this->collLocations) {
				foreach ((array) $this->collLocations as $o) {
					$o->clearAllReferences($deep);
				}
			}
			if ($this->collFavlikesRelatedByUserId) {
				foreach ((array) $this->collFavlikesRelatedByUserId as $o) {
					$o->clearAllReferences($deep);
				}
			}
			if ($this->collFavlikesRelatedByDestUserId) {
				foreach ((array) $this->collFavlikesRelatedByDestUserId as $o) {
					$o->clearAllReferences($deep);
				}
			}
			if ($this->collCommentsRelatedByUserId) {
				foreach ((array) $this->collCommentsRelatedByUserId as $o) {
					$o->clearAllReferences($deep);
				}
			}
			if ($this->collCommentsRelatedByDestUserId) {
				foreach ((array) $this->collCommentsRelatedByDestUserId as $o) {
					$o->clearAllReferences($deep);
				}
			}
			if ($this->collPubssRelatedByUserId) {
				foreach ((array) $this->collPubssRelatedByUserId as $o) {
					$o->clearAllReferences($deep);
				}
			}
			if ($this->collPubssRelatedByDestUserId) {
				foreach ((array) $this->collPubssRelatedByDestUserId as $o) {
					$o->clearAllReferences($deep);
				}
			}
			if ($this->collAudiosRelatedByUserId) {
				foreach ((array) $this->collAudiosRelatedByUserId as $o) {
					$o->clearAllReferences($deep);
				}
			}
			if ($this->collAudiosRelatedByDestUserId) {
				foreach ((array) $this->collAudiosRelatedByDestUserId as $o) {
					$o->clearAllReferences($deep);
				}
			}
			if ($this->collPlaylists) {
				foreach ((array) $this->collPlaylists as $o) {
					$o->clearAllReferences($deep);
				}
			}
			if ($this->collTexts) {
				foreach ((array) $this->collTexts as $o) {
					$o->clearAllReferences($deep);
				}
			}
			if ($this->collLinks) {
				foreach ((array) $this->collLinks as $o) {
					$o->clearAllReferences($deep);
				}
			}
			if ($this->collFollowsRelatedByUserId) {
				foreach ((array) $this->collFollowsRelatedByUserId as $o) {
					$o->clearAllReferences($deep);
				}
			}
			if ($this->collFollowsRelatedByFollowId) {
				foreach ((array) $this->collFollowsRelatedByFollowId as $o) {
					$o->clearAllReferences($deep);
				}
			}
			if ($this->collNotificationsRelatedByUserId) {
				foreach ((array) $this->collNotificationsRelatedByUserId as $o) {
					$o->clearAllReferences($deep);
				}
			}
			if ($this->collNotificationsRelatedByDestUserId) {
				foreach ((array) $this->collNotificationsRelatedByDestUserId as $o) {
					$o->clearAllReferences($deep);
				}
			}
			if ($this->collSettingHasUsers) {
				foreach ((array) $this->collSettingHasUsers as $o) {
					$o->clearAllReferences($deep);
				}
			}
			if ($this->collEvents) {
				foreach ((array) $this->collEvents as $o) {
					$o->clearAllReferences($deep);
				}
			}
			if ($this->collAlbumPhotos) {
				foreach ((array) $this->collAlbumPhotos as $o) {
					$o->clearAllReferences($deep);
				}
			}
			if ($this->collProfilePhotos) {
				foreach ((array) $this->collProfilePhotos as $o) {
					$o->clearAllReferences($deep);
				}
			}
		} // if ($deep)

		$this->collinboxsRelatedByUserId = null;
		$this->collinboxsRelatedByDestUserId = null;
		$this->collsfGuardUserPermissions = null;
		$this->collsfGuardUserGroups = null;
		$this->collsfGuardRememberKeys = null;
		$this->singleSfguardforgotpassword = null;
		$this->collLocations = null;
		$this->collFavlikesRelatedByUserId = null;
		$this->collFavlikesRelatedByDestUserId = null;
		$this->collCommentsRelatedByUserId = null;
		$this->collCommentsRelatedByDestUserId = null;
		$this->collPubssRelatedByUserId = null;
		$this->collPubssRelatedByDestUserId = null;
		$this->collAudiosRelatedByUserId = null;
		$this->collAudiosRelatedByDestUserId = null;
		$this->collPlaylists = null;
		$this->collTexts = null;
		$this->collLinks = null;
		$this->collFollowsRelatedByUserId = null;
		$this->collFollowsRelatedByFollowId = null;
		$this->collNotificationsRelatedByUserId = null;
		$this->collNotificationsRelatedByDestUserId = null;
		$this->collSettingHasUsers = null;
		$this->collEvents = null;
		$this->collAlbumPhotos = null;
		$this->collProfilePhotos = null;
	}

	// symfony_behaviors behavior
	
	/**
	 * Calls methods defined via {@link sfMixer}.
	 */
	public function __call($method, $arguments)
	{
	  if (!$callable = sfMixer::getCallable('BasesfGuardUser:'.$method))
	  {
	    throw new sfException(sprintf('Call to undefined method BasesfGuardUser::%s', $method));
	  }
	
	  array_unshift($arguments, $this);
	
	  return call_user_func_array($callable, $arguments);
	}

} // BasesfGuardUser
